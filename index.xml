<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>learn better， learn more</title>
    <link>http://learnbetter.club/</link>
    <description>Recent content on learn better， learn more</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>penn201500@gmail.com (penn)</managingEditor>
    <webMaster>penn201500@gmail.com (penn)</webMaster>
    <lastBuildDate>Mon, 25 Jul 2016 22:04:40 +0000</lastBuildDate>
    <atom:link href="http://learnbetter.club/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>python脚本爬取今日百度热点新闻</title>
      <link>http://learnbetter.club/2016/07/python3-get-baidu-hotnews/</link>
      <pubDate>Mon, 25 Jul 2016 22:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/07/python3-get-baidu-hotnews/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;python脚本爬取今日百度热点新闻&lt;/p&gt;

&lt;h2 id=&#34;目标:51d7ec03a9202dc68598c4c34fbad920&#34;&gt;目标：&lt;/h2&gt;

&lt;p&gt;python脚本爬取今日百度热点新闻&lt;/p&gt;

&lt;h2 id=&#34;知识点:51d7ec03a9202dc68598c4c34fbad920&#34;&gt;知识点：&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;python3使用 urllib.request.urlopen 去打开一个特定网址&lt;/li&gt;
&lt;li&gt;中文可以加 decode(&amp;lsquo;gbk&amp;rsquo;) 来避免乱码&lt;/li&gt;
&lt;li&gt;re.S 用来解决跨行匹配的问题，用法： re.compile(pattern, re.S)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;代码:51d7ec03a9202dc68598c4c34fbad920&#34;&gt;代码&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import urllib.request
import re

url = &#39;http://news.baidu.com/&#39;
content = urllib.request.urlopen(url).read().decode(&#39;gbk&#39;)

#Example：
#&amp;lt;li class=&amp;quot;hdline0&amp;quot;&amp;gt;
#&amp;lt;i class=&amp;quot;dot&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
#&amp;lt;strong&amp;gt;
#&amp;lt;a href=&amp;quot;http://china.huanqiu.com/article/2016-07/9209287.html?from=bdwz &amp;quot; target=&amp;quot;_blank&amp;quot; class=&amp;quot;a3&amp;quot; mon=&amp;quot;ct=1&amp;amp;amp;a=1&amp;amp;amp;c=top&amp;amp;amp;pn=0&amp;quot;&amp;gt;xxx：扶贫工作不搞层层加码&amp;lt;/a&amp;gt;
#&amp;lt;/strong&amp;gt;
#&amp;lt;/li&amp;gt;

pattern = re.compile(&#39;&amp;lt;li class=&amp;quot;hd.*?&amp;lt;strong&amp;gt;.*?&amp;lt;a.*?&amp;gt;(.*?)&amp;lt;/a&amp;gt;.*?strong&amp;gt;&#39;, re.S)
hotNews = re.findall(pattern, content)

for i in hotNews:
  print(i)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hotnews-from-baidu:51d7ec03a9202dc68598c4c34fbad920&#34;&gt;hotnews from baidu:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/baidu%20hotnews.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;script-excute-result:51d7ec03a9202dc68598c4c34fbad920&#34;&gt;script excute result:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/crawler%20baidu%20hotNews.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>ubuntu的ufw如何开放特定端口?</title>
      <link>http://learnbetter.club/2016/07/ubuntu-ufw-port/</link>
      <pubDate>Fri, 15 Jul 2016 23:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/07/ubuntu-ufw-port/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;ufw是一个主机端的iptables类防火墙配置工具&lt;/p&gt;

&lt;h2 id=&#34;安装:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;安装：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install ufw&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;开启-建议默认关闭所有外部访问:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;开启，建议默认关闭所有外部访问&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo ufw enable&lt;/p&gt;

&lt;p&gt;sudo ufw default deny&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;查看ufw现在已经开放的端口:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;查看ufw现在已经开放的端口：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ubuntu@localhost:~$ sudo ufw status
[sudo] password for ubuntu:
Status: active&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;To&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Action&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;From&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;--&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&amp;mdash;&amp;ndash;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;-&amp;mdash;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;16430&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;30000&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;30001&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1194/tcp&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;16430 (v6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere (v6)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;30000 (v6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere (v6)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;30001 (v6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere (v6)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;1194/tcp (v6)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ALLOW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Anywhere (v6)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ubuntu@localhost:~$&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;新增端口:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;新增端口&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo ufw allow 8080&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;删除端口:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;删除端口&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo ufw delete allow 8080&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;允许特定来源的ip地址访问:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;允许特定来源的ip地址访问&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo ufw allow from 192.168.1.1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;其他命令可以如此查看:d4b58ec88c86c6762eea88f811bd1ed2&#34;&gt;其他命令可以如此查看：&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;ubuntu@localhost:~$ sudo ufw &amp;ndash;help&lt;/p&gt;

&lt;p&gt;Usage: ufw COMMAND&lt;/p&gt;

&lt;p&gt;Commands:&lt;/p&gt;

&lt;p&gt;enable:enables the firewall&lt;/p&gt;

&lt;p&gt;disable:disables the firewall&lt;/p&gt;

&lt;p&gt;&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>python3 reversed&#43;zip 顺时针遍历二维list</title>
      <link>http://learnbetter.club/2016/07/python3-reversed/</link>
      <pubDate>Sun, 10 Jul 2016 21:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/07/python3-reversed/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;之前的博文中谈到了 &lt;a href=&#34;http://learnbetter.club/2016/06/python3-zip/&#34;&gt;python3 zip的用法&lt;/a&gt; ,现在看看reversed与zip配合，顺时针读取二维数组的方法。&lt;/p&gt;

&lt;h2 id=&#34;例题:6394a9245a0a75d698acb8d0f2c41b5a&#34;&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;注：例题来自 &lt;a href=&#34;https://www.codewars.com/kata/snail/python&#34;&gt;https://www.codewars.com/kata/snail/python&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;给定一个n*n的矩阵，通过函数 snail（）得到按顺时针方向读取的list：
array = [[1,2,3],
     [4,5,6],
     [7,8,9]]
snail(array) #=&amp;gt; [1,2,3,6,9,8,7,4,5]
即：
[[1&amp;ndash;&amp;gt;2&amp;ndash;&amp;gt;3],
[4&amp;ndash;&amp;gt;5 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6],
[7&amp;lt;&amp;ndash;8&amp;lt;&amp;ndash;9]]&lt;/li&gt;
&lt;li&gt;如果给定的矩阵为0*0，返回[[]]&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;解法:6394a9245a0a75d698acb8d0f2c41b5a&#34;&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def snail(array):
    #1. Pop top row
    #2. Transpose and flip upside-down (same as rotate 90 degrees counter-clockwise)
    #3. Go to 1
    #and reference:
    #http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion
    
    return list(array[0]) + snail(list(reversed(list(zip(*array[1:]))))) if array else []
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解题思路是：
1. 先取到矩阵的第一行元素
2. 将去除了第一行元素的矩阵逆时针旋转90度：zip方法或transpose方法进行行列转换之后，再使用reverse方法将矩阵上下倒置
3. 回到第一步&lt;/p&gt;

&lt;h2 id=&#34;reverse方法:6394a9245a0a75d698acb8d0f2c41b5a&#34;&gt;&lt;strong&gt;reverse方法&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;python doc：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;reversed(seq)&lt;/strong&gt;
Return a reverse iterator. seq must be an object which has a &lt;strong&gt;reversed&lt;/strong&gt;() method or supports the sequence protocol (the &lt;strong&gt;len&lt;/strong&gt;() method and the &lt;strong&gt;getitem&lt;/strong&gt;() method with integer arguments starting at 0).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list(reversed([&#39;dream&#39;,&#39;a&#39;,&#39;have&#39;,&#39;I&#39;]))
&amp;gt;&amp;gt;&amp;gt;[&#39;I&#39;, &#39;have&#39;, &#39;a&#39;, &#39;dream&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是： reverse（）方法会改变操作对象，如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; b = a
\&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; b.reverse()
&amp;gt;&amp;gt;&amp;gt; b
[4, 3, 2, 1]
&amp;gt;&amp;gt;&amp;gt; a
[4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;而reversed（）不会，如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1,2,3,4]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; b = a
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; reversed(b)
&amp;lt;list_reverseiterator object at 0x0000022BD8937B70&amp;gt;
&amp;gt;&amp;gt;&amp;gt; list(reversed(b))
[4, 3, 2, 1]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4]
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion&#34;&gt;http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/726756/print-two-dimensional-array-in-spiral-order&#34;&gt;http://stackoverflow.com/questions/726756/print-two-dimensional-array-in-spiral-order&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>linux mint 18上安装vim spf13 </title>
      <link>http://learnbetter.club/2016/07/install-vim-spf13-on-linux-mint-18/</link>
      <pubDate>Mon, 04 Jul 2016 22:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/07/install-vim-spf13-on-linux-mint-18/</guid>
      <description>&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;vim的终极配置spf13在linux_mint上的安装步骤如下（非gui）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装vim
菜单&amp;ndash;&amp;gt;软件管理器&amp;ndash;&amp;gt;搜索“vim”。双击vim，安装
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/mint%20install%20vim.jpg&#34; alt=&#34;search and install vim&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装vim-nox
与安装vim一样，搜索vim-nox；使用vim spf13中的neocomplete功能，需要vim有lua特性支持。vim-nox安装之后，查看vim的version信息：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/spf13%20lua%20support.jpg&#34; alt=&#34;vim version with lua support&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装spf13
访问spf13官网：&lt;a href=&#34;http://vim.spf13.com/&#34;&gt;http://vim.spf13.com/&lt;/a&gt;
打开terminal，输入：&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;curl &lt;a href=&#34;http://j.mp/spf13-vim3&#34;&gt;http://j.mp/spf13-vim3&lt;/a&gt; -L -o - | sh&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后等待安装完成。
  如果安装失败，提示git或者curl未安装:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;sudo apt-get install git
sudo apt-get install curl&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;配置color-scheme，NerdTree，字体
安装完成之后，在.spf13-vim-3同一级目录下，有&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;.vimrc
.vimrc.before
.vimrc.bundles
.viminfo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用molokai color-scheme：
  可以在.vimrc.local中配置colorscheme，也可以vim中执行命令，如：
  &lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/colorshceme%20molokai.jpg&#34; alt=&#34;molokai color-scheme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;配置NerdTree标签：需要在与.spf13-vim-3同一级目录下创建文件.NERDTreeBookmarks 文件中内容如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;.spf13-vim-3 ~/.spf13-vim-3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样会在NERDTree的标签中显示标签 &lt;code&gt;.spf13-vim-3&lt;/code&gt;
  &lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/spf13%20bookmarks.jpg&#34; alt=&#34;nerdtree bookmark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;添加.vimrc.local:
  与.spf13-vim-3同一级目录下创建文件.vimrc.local，用来做个性化配置。如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;rdquo;================快捷换行==================
nmap &lt;c-up&gt; ddkP
nmap &lt;c-down&gt; ddp
vmap &lt;c-up&gt; xkP&lt;code&gt;[V&lt;/code&gt;]
vmap &lt;c-down&gt; xp&lt;code&gt;[V&lt;/code&gt;]
&amp;ldquo; ======= 使nerd-tree 能够copy文件 ======= &amp;rdquo;
let g:NERDTreeCopyCmd = &amp;lsquo;cp -r &amp;lsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;配置NerdTree打开时显示的路径：
  在.vimrc.local中增加&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;rdquo; ======= 设置NERDTree打开时的目录 ======= &amp;ldquo;
cd /home/mint/python_projects
&amp;ldquo; shortcut to toggle NerdTree
map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;&lt;br /&gt;
&amp;rdquo; open Nerd Tree in folder of file in active buffer
map &lt;Leader&gt;nt :NERDTree %:p:h&lt;CR&gt;
autocmd bufenter * if (winnr(&amp;ldquo;$&amp;rdquo;) == 1 &amp;amp;&amp;amp; exists(&amp;ldquo;b:NERDTreeType&amp;rdquo;) &amp;amp;&amp;amp; b:NERDTreeType == &amp;ldquo;primary&amp;rdquo;) |q| endif&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加.vimrc.bundles.local 用来配置自己的插件，如：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bundle &amp;lsquo;mhinz/vim-startify&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;添加自己的插件之后，执行命令插件：
  &amp;gt;vim +BundleInstall! +BundleClean +q&lt;/p&gt;

&lt;p&gt;在.vimrc.local中配置字体：
  &amp;gt;&amp;rdquo; ======= 自定义快捷键 ======= &amp;ldquo;
&amp;ldquo; 设置着色模式和字体
colorscheme molokai
set guifont=Monaco:h11
&amp;ldquo; AirLine             彩色状态栏
let g:airline_theme = &amp;lsquo;dark&amp;rsquo;                &amp;ldquo; 设置主题&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>获取两个字符串中最长的公共字符串</title>
      <link>http://learnbetter.club/2016/06/longest-common-substring/</link>
      <pubDate>Sun, 26 Jun 2016 21:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/longest-common-substring/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;例题:03e4760e1ab426fb87738f4b382c95c8&#34;&gt;&lt;strong&gt;例题：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;longest common substring
获取两个字符串中最长的公共字符串
如：
如果s1=&amp;lsquo;abcdefgh&amp;rsquo;，s2=&amp;lsquo;cdefgh&amp;rsquo;; s1与s2的最长公共字符串&amp;rsquo;cd&amp;rsquo;&lt;/p&gt;

&lt;p&gt;例子：
&amp;gt;s1=&amp;lsquo;abcdefgh&amp;rsquo;，s2=&amp;lsquo;cdefgh&amp;rsquo;
lcs(s1,s2) ==&amp;gt; &amp;lsquo;cd&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&#34;解法:03e4760e1ab426fb87738f4b382c95c8&#34;&gt;&lt;strong&gt;解法：&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def lcs(s1,s2):
    m = len(s1)
    n = len(s2)
    counter = [[0]*(n+1) for x in range(m+1)]
    longest = 0
    lcs_set = set()
    for i in range(1,m+1):
        for j in range(1,n+1):
            if s1[i-1] == s2[j-1]:
                c = counter[i-1][j-1] + 1
                counter[i][j] = c
                if c &amp;gt; longest:
                    lcs_set = set()
                    longest = c
                    lcs_set.add(s1[i-c:i])
                elif c == longest:
                    lcs_set.add(s1[i-c:i])
    return lcs_set


if __name__ == &amp;quot;__main__&amp;quot;:
    assert lcs(&#39;academy&#39;, &#39;abracadabra&#39;) == {&#39;acad&#39;}
    assert lcs(&#39;ababc&#39;, &#39;abcdaba&#39;) == {&#39;aba&#39;,&#39;abc&#39;}
    assert lcs(&#39;abcdefgh&#39;, &#39;cdefgh&#39;) == {&#39;cdefgh&#39;}
    assert lcs(&#39;abcdefgh&#39;, &#39;&#39;) == set()
    print(&#39;assert complete!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;C:\Anaconda3\python.exe E:/python_projects/test.py
assert complete!

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;解释:03e4760e1ab426fb87738f4b382c95c8&#34;&gt;&lt;strong&gt;解释：&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;创建一个二维矩阵counter用来记录最长相同字符串的长度
&lt;code&gt;python
m = len(S)
n = len(T)
counter = [[0]*(n+1) for x in range(m+1)]
&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%201.jpg&#34; alt=&#34;&#34; /&gt;
2. 将s1中的每一个字符与s2中的每一个字符进行比较&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(m):
    for j in range(n):
        if S[i] == T[j]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%202.jpg&#34; alt=&#34;&#34; /&gt;
3. 如果s1的第i个字符和s2的第j个字符相同，则将矩阵counter[i+1][j+1]的值在counter[i][j]的基础上加1&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if S[i] == T[j]:
    c = counter[i][j] + 1
    counter[i+1][j+1] = c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%203.jpg&#34; alt=&#34;&#34; /&gt;
4. 如果现在的最长substring比以前的substring长，更新longest和set为新substring；如果新的substring和以前的substring一样长，直接将新的substring加入到set中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if c &amp;gt; longest:
     lcs_set = set()
     longest = c
     lcs_set.add(S[i-c+1:i+1])
elif c == longest:
     lcs_set.add(S[i-c+1:i+1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%204.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;寻找最长回文字符串:03e4760e1ab426fb87738f4b382c95c8&#34;&gt;&lt;strong&gt;寻找最长回文字符串&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;上一篇博客&lt;a href=&#34;http://blog.csdn.net/justheretobe/article/details/51761575&#34;&gt;获取string中的最长回文字符串&lt;/a&gt;还可以使用寻找两个字符串最长公共substring的方法解答：
1. s1=‘给定字符串’
2. s2=‘给定字符串的反序’
3. 比较s1与s2, 获取两个字符串中最长的公共字符串，即为s1最长的回文字符串
代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def longest_palindrome (s):
    s1 = s
    s2 = s1[::-1]
    if len(s) == 1 : return 1
    elif len(s) == 0: return 0
    else:
      #get the longest common string between s1 and reversed s1
      m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]
      longest, x_longest = 0, 0
      for x in range(1, 1 + len(s1)):
        for y in range(1, 1 + len(s2)):
          if s1[x - 1] == s2[y - 1]:
            m[x][y] = m[x - 1][y - 1] + 1
            if m[x][y] &amp;gt; longest:
              longest = m[x][y]
              x_longest = x
          else:
              m[x][y] = 0

      #if the longest common string is palindrome, return its length, else return 1
      longest_string = s1[(x_longest-longest):x_longest]
      if longest_string == longest_string[::-1]: return longest
      else: return 1


if __name__ == &amp;quot;__main__&amp;quot;:
    assert longest_palindrome(&#39;abcdab123454321&#39;) == 9
    assert longest_palindrome(&#39;ab&#39;) == 1
    assert longest_palindrome(&#39;aa&#39;) == 2
    assert longest_palindrome(&#39;&#39;) == 0
    assert longest_palindrome(&#39;abcdefba&#39;) == 1
    print(&#39;assert complete!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;C:\Anaconda3\python.exe E:/python_projects/test.py
assert complete!

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更多longest_palindrome 解法，见：
&lt;a href=&#34;https://www.codewars.com/kata/longest-palindrome/solutions/python&#34;&gt;https://www.codewars.com/kata/longest-palindrome/solutions/python&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Reference：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.bogotobogo.com/python/python_solutions.php#longest_substring&#34;&gt;从给定string中找出至多只包含两个不同字符的最长substring&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解释和主要代码来自：
&lt;a href=&#34;http://www.bogotobogo.com/python/python_longest_common_substring_lcs_algorithm_generalized_suffix_tree.php&#34;&gt;python_longest_common_substring_lcs_algorithm_generalized_suffix_tree&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>获取string中的最长回文字符串</title>
      <link>http://learnbetter.club/2016/06/longest_palindrome/</link>
      <pubDate>Sun, 26 Jun 2016 19:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/longest_palindrome/</guid>
      <description>

&lt;hr /&gt;

&lt;h2 id=&#34;例题:44af3760fc3194ac830c03427bef8298&#34;&gt;&lt;strong&gt;例题&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;获取string中的最长回文字符串&lt;/p&gt;

&lt;p&gt;所谓回文字符串，即该字符串从左到右读和从右到左读是完全一样的。如“123454321”就是一个长度为9的回文字符串。
现要求使用python完成：对一个字符串s，找出其中为回文字符串的部分，并返回回文字符串的长度。规则为：
1. 如果s是1个字符，则长度为1，如“a”
2. 如果s为空“”，则长度为0
3. 如果s中有部分是回文字符串，返回最长回文字符串及其长度，如“aab”，最长回文字符串为“aa”，长度为2&lt;/p&gt;

&lt;p&gt;例子：
&amp;gt;&amp;ldquo;a&amp;rdquo; -&amp;gt; 1
&amp;ldquo;aab&amp;rdquo; -&amp;gt; 2&lt;br /&gt;
&amp;ldquo;abcde&amp;rdquo; -&amp;gt; 1
&amp;ldquo;zzbaabcd&amp;rdquo; -&amp;gt; 4
&amp;ldquo;&amp;rdquo; -&amp;gt; 0&lt;/p&gt;

&lt;h2 id=&#34;解法:44af3760fc3194ac830c03427bef8298&#34;&gt;&lt;strong&gt;解法&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;对该字符串的每个长度的组合都进行比较，如果是回文字符串，记录其长度。返回最长的回文字符串&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def longest_palindrome (s):
    longest = 0
    if s == &#39;&#39;: return &#39;&#39;
    for left in range(len(s)):
        for right in range(len(s), left, -1):
            if s[left:right] in (s[left:right])[::-1]:
                #longest = max(right-left, longest)
                if (right-left)&amp;gt;longest:
                    longest = right-left
                    palindrome = s[left:right]
                    break
                else: break
    return palindrome

if __name__ == &amp;quot;__main__&amp;quot;:
    assert longest_palindrome(&#39;abcdab123454321&#39;) == &#39;123454321&#39;
    assert len(longest_palindrome(&#39;abcdab123454321&#39;)) == 9
    assert longest_palindrome(&#39;ab&#39;) == &#39;a&#39;
    assert len(longest_palindrome(&#39;ab&#39;)) == 1
    assert longest_palindrome(&#39;aa&#39;) == &#39;aa&#39;
    assert len(longest_palindrome(&#39;aa&#39;)) == 2
    assert longest_palindrome(&#39;&#39;) == &#39;&#39;
    assert len(longest_palindrome(&#39;&#39;)) == 0
    assert longest_palindrome(&#39;abcdefba&#39;) == &#39;a&#39;
    assert len(longest_palindrome(&#39;abcdefba&#39;)) == 1

    print(&#39;assert complete!&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;C:\Anaconda3\python.exe E:/python_projects/test.py
assert complete!

Process finished with exit code 0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>python3 sorted的用法</title>
      <link>http://learnbetter.club/2016/06/python3-sorted/</link>
      <pubDate>Sun, 19 Jun 2016 21:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/python3-sorted/</guid>
      <description>

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;例题:55447a98b04e184bd08bcb4f57ca58c1&#34;&gt;&lt;strong&gt;例题：&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;先来看一个例题：
给你一个其中包含不同的英文字母和标点符号的文本，你要找到其中出现最多的字母，返回的字母必须是小写形式，
当检查最想要的字母时，不区分大小写，所以在你的搜索中 &amp;quot;A&amp;quot; == &amp;quot;a&amp;quot;。 请确保你不计算标点符号，数字和空格，只计算字母。
如果你找到 两个或两个以上的具有相同的频率的字母， 返回那个先出现在字母表中的字母。 例如 -- “one”包含“o”，“n”，“e”每个字母一次，因此我们选择“e”。
**输入:** 用于分析的文本 (str, unicode).
**输出:** 最常见的字母的小写形式。
**前提::**
密码只包含ASCII码符号
0 &amp;lt; len(text) ≤ 105
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用sorted的解法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def checkio(text):
    #filter out not-alphebet char
    if text.isalpha():  text = text.lower()
    else:  text = &#39;&#39;.join([x.lower() for x in text if x.isalpha()])
    #print(text)

    from collections import Counter
    str_count = Counter(text)
    #print(str_count)
    #sorted with two parameters, the first parameter is the count of every char,the second is alphabet
    str_sorted = sorted(Counter(text).items(), key=lambda k: (k[1],k[0]))
    #print(str_sorted)
    #get the most wanted chars
    most_wanted_letters = [item for item in str_sorted if item[1] == str_sorted[len(str_sorted) - 1][1]]
    return most_wanted_letters[0][0]

if __name__ == &#39;__main__&#39;:
    #These &amp;quot;asserts&amp;quot; using only for self-checking and not necessary for auto-testing
    assert checkio(&amp;quot;Hello World!&amp;quot;) == &amp;quot;l&amp;quot;, &amp;quot;Hello test&amp;quot;
    assert checkio(&amp;quot;How do you do?&amp;quot;) == &amp;quot;o&amp;quot;, &amp;quot;O is most wanted&amp;quot;
    assert checkio(&amp;quot;One&amp;quot;) == &amp;quot;e&amp;quot;, &amp;quot;All letter only once.&amp;quot;
    assert checkio(&amp;quot;Oops!&amp;quot;) == &amp;quot;o&amp;quot;, &amp;quot;Don&#39;t forget about lower case.&amp;quot;
    assert checkio(&amp;quot;AAaooo!!!!&amp;quot;) == &amp;quot;a&amp;quot;, &amp;quot;Only letters.&amp;quot;
    assert checkio(&amp;quot;abe&amp;quot;) == &amp;quot;a&amp;quot;, &amp;quot;The First.&amp;quot;
    print(&amp;quot;Start the long test&amp;quot;)
    assert checkio(&amp;quot;a&amp;quot; * 9000 + &amp;quot;b&amp;quot; * 1000) == &amp;quot;a&amp;quot;, &amp;quot;Long.&amp;quot;
    print(&amp;quot;The local tests are done.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果如下：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/checkio%20most%20wanted%20letter.jpg&#34; alt=&#34;the most wanted letter&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;sorted的用法:55447a98b04e184bd08bcb4f57ca58c1&#34;&gt;&lt;strong&gt;sorted的用法：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;分析解法的关键代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;str_sorted = sorted(Counter(text).items(), key=lambda k: (k[1],k[0]))    增加print测试:
#print(text)
&amp;gt;&amp;gt;&amp;gt;checkio(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)
loremipsumdolorsitamet
&amp;lt;&amp;lt;&amp;lt; &#39;m&#39;
#print(str_sorted)
&amp;gt;&amp;gt;&amp;gt;checkio(&amp;quot;Lorem ipsum dolor sit amet&amp;quot;)
loremipsumdolorsitamet
Counter({&#39;m&#39;: 3, &#39;o&#39;: 3, &#39;i&#39;: 2, &#39;l&#39;: 2, &#39;s&#39;: 2, &#39;e&#39;: 2, &#39;t&#39;: 2, &#39;r&#39;: 2, &#39;d&#39;: 1, &#39;p&#39;: 1, &#39;a&#39;: 1, &#39;u&#39;: 1})
&amp;lt;&amp;lt;&amp;lt; &#39;m&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里sorted使用&lt;strong&gt;两个关键字&lt;/strong&gt;进行排序：
先按照每个字母出现的次数k[1]进行排序，然后安装字母表顺序对测试text中的内容k[0]进行排序.&lt;/p&gt;

&lt;p&gt;python3手册对sorted的用法描述如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sorted(iterable[, key][, reverse])

Return a new sorted list from the items in iterable.

Has two optional arguments which must be specified as keyword arguments.

key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).

reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed.

Use functools.cmp_to_key() to convert an old-style cmp function to a key function.

The built-in sorted() function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).

For sorting examples and a brief sorting tutorial, see Sorting HOW TO.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sorted的第一个参数是一个迭代器，第二个参数是用来排序的key，第三个参数的排序数序：正序还是倒序
如：
第一个参数是迭代器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sorted([36, 5, -12, 9, -21])
[-21, -12, 5, 9, 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第二个参数是用来排序的key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]    key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：
list = [36, 5, -12, 9, -21]
keys = [36, 5,  12, 9,  21]
然后sorted()函数按照keys进行排序，并按照对应关系返回list相应的元素：
keys排序结果 =&amp;gt; [5, 9,  12,  21, 36]
最终结果     ====&amp;gt; [5, 9, -12, -21, 36]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第三个参数决定正向还是反向排序：
要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sorted([&#39;bob&#39;, &#39;about&#39;, &#39;Zoo&#39;, &#39;Credit&#39;], key=str.lower, reverse=True)
[&#39;Zoo&#39;, &#39;Credit&#39;, &#39;bob&#39;, &#39;about&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;例题解法来自 &lt;a href=&#34;https://checkio.org/user/penn201500/&#34;&gt;https://checkio.org/user/penn201500/&lt;/a&gt;
更优解法为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import string
​
def checkio(text):
    &amp;quot;&amp;quot;&amp;quot;
    We iterate through latyn alphabet and count each letter in the text.
    Then &#39;max&#39; selects the most frequent letter.
    For the case when we have several equal letter,
    &#39;max&#39; selects the first from they.
    &amp;quot;&amp;quot;&amp;quot;
    text = text.lower()
    return max(string.ascii_lowercase, key=text.count)
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318230588782cac105d0d8a40c6b450a232748dc854000&#34;&gt;廖雪峰官网 sorted方法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://checkio.org/mission/most-wanted-letter/&#34;&gt;checkio: most wanted letter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318230588782cac105d0d8a40c6b450a232748dc854000&#34;&gt;sorted()函数&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>python3 zip的用法</title>
      <link>http://learnbetter.club/2016/06/python3-zip/</link>
      <pubDate>Sun, 19 Jun 2016 19:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/python3-zip/</guid>
      <description>

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;例子:3a2916a882b53bf4714c682a2b069b9a&#34;&gt;&lt;strong&gt;例子：&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;井字游戏，有时也被称为“进攻和防守”，是一个两人玩家（X和O）轮流标志着3×3的网格的空间的连珠游戏。最先在任意一条直线（水平线，垂直线或对角线）上成功连接三个标记的一方获胜。&lt;/p&gt;

&lt;p&gt;但我们不去玩这个游戏。你将是这个游戏的裁判。你被赋予游戏的结果，以及你必须判断游戏是平局还是有人胜出，以及谁将会成为最后的赢家。如果X玩家获胜，返回“X”。如果O玩家获胜，返回“O”。如果比赛是平局，返回“D”。&lt;/p&gt;

&lt;p&gt;x-o-referee&lt;/p&gt;

&lt;p&gt;游戏的结果是作为字符串形式的列表，其中“X”和“O”是玩家的标志，“.”是空格。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; 游戏结果作为字符串形式的列表(Unicode)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;输出:&lt;/strong&gt; “X”，“O”或“D”作为字符串形式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;范例:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;checkio([
    “X.O”,
    “XX.”,
    “XOO”]) == “X”&lt;/p&gt;

&lt;p&gt;checkio([
    “OO.”,
    “XOX”,
    “XOX”]) == “O”&lt;/p&gt;

&lt;p&gt;checkio([
    “OOX”,
    “XXO”,
    “OXX”]) == “D”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如何使用：&lt;/strong&gt; 此任务中的概念将有助于您遍历数据类型。这还可以用在游戏的算法上，让你知道如何去检查结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;最多推荐的解法：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def checkio(result):
    rows = result
    cols = map(&#39;&#39;.join, zip(*rows))
    diags = map(&#39;&#39;.join, zip(*[(r[i], r[2 - i]) for i, r in enumerate(rows)]))
    lines = rows + list(cols) + list(diags)
​
    return &#39;X&#39; if (&#39;XXX&#39; in lines) else &#39;O&#39; if (&#39;OOO&#39; in lines) else &#39;D&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的最多推荐的解法，步骤是：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.将列表result中的3个元素拆开成3个tuple（tuple是列的元素组合）&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; result = [
…     “OOX”,
…     “XXO”,
…     “OXX”]&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; rows = result&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; for i in zip(*rows):&lt;/p&gt;

&lt;p&gt;…   print(i)&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;(‘O’, ‘X’, ‘O’)&lt;/p&gt;

&lt;p&gt;(‘O’, ‘X’, ‘X’)&lt;/p&gt;

&lt;p&gt;(‘X’, ‘O’, ‘X’)&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.获取对角线上的元素组合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.行上的元素组合+列上的元素组合+对角线元素组合，然后判断胜利方&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;zip的用法:3a2916a882b53bf4714c682a2b069b9a&#34;&gt;&lt;strong&gt;zip的用法：&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;help(zip)

Help on class zip in module builtins:

class zip(object)

 |  zip(iter1 [,iter2 [...]]) --&amp;gt; zip object
 |
 |  Return a zip object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the shortest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.
 |
 |  Methods defined here:
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  __next__(self, /)
 |      Implement next(self).
 |
 |  __reduce__(...)
 |      Return state information for pickling.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;zip输入参数是一些迭代器，执行完成之后返回zip object（迭代器 ,tuple list）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;zip用法中需要注意的是：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.zip是将每个可迭代对象的对应位置元素打包成一个tuple组，例如：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;二维矩阵变换（矩阵的行列互换）
比如我们有一个由列表描述的二维矩阵
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
利用zip函数：
&amp;gt;&amp;gt;&amp;gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&amp;gt;&amp;gt;&amp;gt; zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
&amp;gt;&amp;gt;&amp;gt; map(list,zip(*a))
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2.(*)操作符与zip函数配合可以实现与zip相反的功能,即将合并的序列拆成多个tuple，如解法中的zip(*rows)。如：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;x=[1,2,3],y=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt;zip(*zip(x,y))
[(1,2,3),(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.新的序列的长度以参数中最短的序列为准.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;x=[1,2],y=[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt;zip(x,y)
[(1,&#39;a&#39;),(2,&#39;b&#39;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;zip另有一些高级用法：&lt;/strong&gt;&lt;strong&gt;1.python列表相邻元素压缩：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group_adjacent = lambda a, k: zip(*([iter(a)] * k))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;强烈推荐阅读：&lt;a href=&#34;https://segmentfault.com/q/1010000000612945&#34;&gt;https://segmentfault.com/q/1010000000612945&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关键摘录：
iter() 能把一个序列生成为一个和迭代器，迭代器的特点是可以用 for in 语句迭代，原理是迭代器对象有一个next方法，可以每次移动迭代的指针，一旦迭代完，没有下一个元素的时候，会应发一个 StopIteration 异常。&lt;/p&gt;

&lt;p&gt;迭代器的特点就是，迭代了一次之后，指针就移动了，不会自动回溯。例如可以用 for in 列表 a 无数次，却只能for in 迭代器 x 一次。&lt;/p&gt;

&lt;p&gt;如果不用迭代器？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; x = iter(a)
&amp;gt;&amp;gt;&amp;gt; t = [a, a]
&amp;gt;&amp;gt;&amp;gt; zip(*t)                 # 1
[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]  
&amp;gt;&amp;gt;&amp;gt; tx = [x, x]                                   
&amp;gt;&amp;gt;&amp;gt; zip(*tx)                # 2
[(1, 2), (3, 4), (5, 6)]
&amp;gt;&amp;gt;&amp;gt; 

#1 这里的含义表示zip 传了两个参数a，a1 a2 都是a，所以就打包了这两个序列。
#2 这里面因为 x 是迭代器对象，迭代就调用 next 方法，之后就不会有了。也就是 zip 执行打包的过程先调用第一个参数的 x 的 next 方法得 1，然后调用第二个参数的 x 的next，因为这两个x对象实际上是一样的，调用第二个 x 的 next 方法的时候，迭代的指针已经移动，实际得到的时2，以次类推，过程模拟如下表示
     x.next -&amp;gt; 1
     x.next -&amp;gt; 2
     zip(x.next(), x.next()) ---&amp;gt; zip(1, 2)
     x.next -&amp;gt; 3
     x.next -&amp;gt; 4
     zip(x.next(), x.next()) ---&amp;gt; zip(3, 4)
    ....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等价于下面的方式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;zip([1, 3, 5], [2, 4, 6])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group_adjacent = lambda a, k: zip(*([iter(a)] * k))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示定义一个匿名函数，参数是 a和k，并绑定变量 group_adjacent。匿名函数的主体内容是，用iter将序列迭代化，然后用zip打包这个迭代器对象。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.使用zip反转字典&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; m = {&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}
&amp;gt;&amp;gt;&amp;gt; m.items()
[(&#39;a&#39;, 1), (&#39;c&#39;, 3), (&#39;b&#39;, 2), (&#39;d&#39;, 4)]
&amp;gt;&amp;gt;&amp;gt; zip(m.values(), m.keys())
[(1, &#39;a&#39;), (3, &#39;c&#39;), (2, &#39;b&#39;), (4, &#39;d&#39;)]
&amp;gt;&amp;gt;&amp;gt; mi = dict(zip(m.values(), m.keys()))
&amp;gt;&amp;gt;&amp;gt; mi
{1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3.使用zip和iterators生成滑动窗口 (n -grams)&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from itertools import islice
&amp;gt;&amp;gt;&amp;gt; def n_grams(a, n):
...     z = (islice(a, i, None) for i in range(n))
...     return zip(*z)
...
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; n_grams(a, 3)
[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
&amp;gt;&amp;gt;&amp;gt; n_grams(a, 2)
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
&amp;gt;&amp;gt;&amp;gt; n_grams(a, 4)
[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]
#
islice的用法：
islice()    seq, [start,] stop [, step] elements from seq[start:stop:step]  islice(&#39;ABCDEFG&#39;, 2, None) --&amp;gt; C D E F G
测试islice：
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; for x in islice(a,0,None):
...   print(x)
...
1
2
3
4
5
6
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; for x in islice(a,1,None):
...   print(x)
...
2
3
4
5
6
&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3, 4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; for x in islice(a,2,None):
...   print(x)
...
3
4
5
6
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;例题解法来自 &lt;a href=&#34;https://checkio.org/&#34;&gt;https://checkio.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;我在 &lt;a href=&#34;https://checkio.org/user/penn201500/&#34;&gt;https://checkio.org/user/penn201500/&lt;/a&gt; ：）&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wklken.me/posts/2013/08/20/python-extra-itertools.html&#34;&gt;PYTHON-进阶-ITERTOOLS模块小结&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/BeginMan/archive/2013/03/14/2959447.html&#34;&gt;Python零碎知识(2):强大的zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/q/1010000000612945&#34;&gt;python列表相邻元素压缩器&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建个人博客（五）：添加站内搜索（gcse）</title>
      <link>http://learnbetter.club/2016/06/hugo-5-add-gcse/</link>
      <pubDate>Fri, 17 Jun 2016 21:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/hugo-5-add-gcse/</guid>
      <description>

&lt;p&gt;站内搜索推荐使用google custom search engine(gsce)。
gcse的使用方法强烈推荐阅读：&lt;a href=&#34;http://lulee007.coding.me/2016/01/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE%E4%B9%8B-%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/&#34;&gt;Hexo博客优化配置之&amp;ndash;为自己博客添加站内搜索&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;关键部分:718753fbe980b91129d6dd9831275dc1&#34;&gt;&lt;strong&gt;关键部分：&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console%202.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console%203.jpg&#34; alt=&#34;&#34; /&gt;
&lt;p/&gt;
下面介绍如何在crisp的侧边栏中添加search box。&lt;/p&gt;

&lt;h2 id=&#34;获取search-thml:718753fbe980b91129d6dd9831275dc1&#34;&gt;&lt;strong&gt;获取search.thml&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在以下github 仓库中获取search.html文件，存放到本地header.html所在的目录。
&lt;a href=&#34;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/search.html&#34;&gt;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/search.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;修改hearder-html:718753fbe980b91129d6dd9831275dc1&#34;&gt;&lt;strong&gt;修改hearder.html：&lt;/strong&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;
           &amp;lt;!--
            &amp;lt;a id=&amp;quot;logo&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://www.gravatar.com/avatar/1a2807faf3cca1667ff6f04bf5886eff.png&amp;quot; alt=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
            --&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{.Site.BaseURL}}&amp;quot;&amp;gt;{{.Site.Title}}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;{{.Description}}&amp;lt;/p&amp;gt;

            {{ partial &amp;quot;follow.html&amp;quot; . }}
            {{ partial &amp;quot;navigation.html&amp;quot; . }}
            {{ partial &amp;quot;tags.html&amp;quot; . }}
            {{ partial &amp;quot;search.html&amp;quot; . }}     &amp;lt;!--这里添加search box--&amp;gt;       
        &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-在crisp主题下新建search文件夹:718753fbe980b91129d6dd9831275dc1&#34;&gt;3. 在crisp主题下新建search文件夹&lt;/h2&gt;

&lt;p&gt;从&lt;a href=&#34;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/search/index.html&#34;&gt;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/search/index.html&lt;/a&gt; 获取index.html放到search文件夹中。
将从google search engine中得到的搜索结果代码粘贴到index.html中的script部分：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;h1 class=&amp;quot;post-title&amp;quot;&amp;gt;Search Results&amp;lt;/h1&amp;gt;
    &amp;lt;script&amp;gt;
  (function() {
    var cx = &#39;009059558632698478175:4wpqidijmx4&#39;;
    var gcse = document.createElement(&#39;script&#39;);
    gcse.type = &#39;text/javascript&#39;;
    gcse.async = true;
    gcse.src = &#39;https://cse.google.com/cse.js?cx=&#39; + cx;
    var s = document.getElementsByTagName(&#39;script&#39;)[0];
    s.parentNode.insertBefore(gcse, s);
  })();
&amp;lt;/script&amp;gt;
&amp;lt;gcse:searchresults-only&amp;gt;&amp;lt;/gcse:searchresults-only&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时在侧边栏能看到search box但是不能搜索到结果:
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20blog%20add%20gcse.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-生成public并发布到服务器:718753fbe980b91129d6dd9831275dc1&#34;&gt;4. 生成public并发布到服务器&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;hugo -t crisp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在mysite目录执行以上命令，生成public目录。将public目录发布到服务器即可。
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20published%20and%20can%20search%20in%20site.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果是发布到github-pages，可以参考：
&lt;a href=&#34;http://www.liuhaihua.cn/archives/133615.html&#34;&gt;http://www.liuhaihua.cn/archives/133615.html&lt;/a&gt;
&lt;a href=&#34;https://www.zhihu.com/question/20962496&#34;&gt;https://www.zhihu.com/question/20962496&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;参考：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lulee007.coding.me/2016/01/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE%E4%B9%8B-%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/&#34;&gt;Hexo博客优化配置之&amp;ndash;为自己博客添加站内搜索&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://prozhuchen.github.io/2015/10/03/Hexo%E5%8D%9A%E5%AE%A2%E7%AC%AC%E5%9B%9B%E7%AB%99/&#34;&gt;Hexo博客第四站：搜索引擎+小插件+配置结构分析&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://kb.iu.edu/d/bckj&#34;&gt;How do I use Google Custom Search on my website?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建个人博客（四）：添加评论系统disqus</title>
      <link>http://learnbetter.club/2016/06/hugo-4-add-disqus/</link>
      <pubDate>Thu, 16 Jun 2016 15:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/hugo-4-add-disqus/</guid>
      <description>&lt;p&gt;按照官方说法，只需要在config.toml文件中加上disqus的shortname即可让博客拥有disqus评论系统的功能。但折腾许久未能成功，现提供另一种添加disqus的方式。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.注册disqus&lt;/strong&gt;
官网注册帐号 &lt;a href=&#34;https://disqus.com/&#34;&gt;https://disqus.com/&lt;/a&gt;
使用方式可以参考 &lt;a href=&#34;http://alfred-sun.github.io/blog/2014/12/05/github-pages/&#34;&gt;http://alfred-sun.github.io/blog/2014/12/05/github-pages/&lt;/a&gt;
&lt;p/&gt;
&lt;strong&gt;2.使用disqus&lt;/strong&gt;
这里使用universal code的方式，将生成的code放到新文件comments.html中：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;disqus_thread&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
/**
* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables
*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL; // Replace PAGE_URL with your page&#39;s canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page&#39;s unique identifier variable
};
*/
(function() { // DON&#39;T EDIT BELOW THIS LINE
var d = document, s = d.createElement(&#39;script&#39;);

s.src = &#39;//wwwlearnbetterclub.disqus.com/embed.js&#39;;

s.setAttribute(&#39;data-timestamp&#39;, +new Date());
(d.head || d.body).appendChild(s);
})();
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&amp;quot;https://disqus.com/?ref_noscript&amp;quot; rel=&amp;quot;nofollow&amp;quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;s.src请修改为自己的帐号信息
comments.html与header.html在同一个目录。&lt;/p&gt;

&lt;p&gt;显示效果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20add%20disqus.jpg&#34; alt=&#34;hugo add disqus&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;p/&gt;
&lt;strong&gt;3.博文中的comments可以关闭disqus功能&lt;/strong&gt;
可以对某篇博文单独关闭disqus功能。如test.md&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
Categories = [&amp;quot;test&amp;quot;]
Description = &amp;quot;test&amp;quot;
Tags = [&amp;quot;test&amp;quot;]
menu = &amp;quot;main&amp;quot;
title = &amp;quot;test hugo&amp;quot;
comments = false      #这里的comments取值为false，disqus则不可见
date = 2014-08-09T05:04:40Z
+++


hello hugo! I am test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comments取值为false的显示效果为：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20post-s%20comments%20is%20false%20and%20no%20disqus.jpg&#34; alt=&#34;hugo blog comments is false and disqus no display&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;如果使用多说评论，请参考 &lt;a href=&#34;http://tonybai.com/2015/09/23/intro-of-gohugo/&#34;&gt;http://tonybai.com/2015/09/23/intro-of-gohugo/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建个人博客（三）：添加follow与修改share的方式</title>
      <link>http://learnbetter.club/2016/06/hugo-3-update-follow-and-share-method/</link>
      <pubDate>Wed, 15 Jun 2016 12:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/hugo-3-update-follow-and-share-method/</guid>
      <description>

&lt;p&gt;本文继续介绍如何添加follow方式与修改share的方式。&lt;/p&gt;

&lt;h2 id=&#34;添加mailto的功能:be96fdf8ac2693168d6b80866d0333b7&#34;&gt;&lt;strong&gt;添加mailto的功能&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在侧边栏的follow方式中，只留下了github follow。现增加mail to 的follow方式，便于读者使用邮件方式与博主沟通。&lt;/p&gt;

&lt;p&gt;follow方式添加mail to邮箱follow方式中也可以添加mail，图标使用fontawesome的fa fa-envelope-o。
fontqwesome的图标可以调整大小和颜色，具体讨论见：
&lt;a href=&#34;http://stackoverflow.com/questions/12272372/how-to-style-icon-color-size-and-shadow-of-font-awesome-icons&#34;&gt;http://stackoverflow.com/questions/12272372/how-to-style-icon-color-size-and-shadow-of-font-awesome-icons&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改  E:\github_projects\hugo-crisp-theme-for-blog\mysite\themes\crisp\layouts\partials\follow.html文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;follow-icons&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://github.com/penn201500&amp;quot; rel=&amp;quot;me&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-github-square fa-2x&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;mailto:penn201500@gmail.com&amp;quot; title=&amp;quot;Gmail&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-envelope-o fa-2x&amp;quot; style=&amp;quot;color:green&amp;quot; style=&amp;quot;font-size: 13px;&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;    &amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;提醒：&lt;/strong&gt;请将mail地址和github地址修改为自己的帐号&lt;/p&gt;

&lt;p&gt;显示效果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20add%20mailto%20follow%20method.jpg&#34; alt=&#34;add mail to&#34; /&gt;
&lt;p/&gt;
&lt;p/&gt;&lt;/p&gt;

&lt;h2 id=&#34;修改share方式:be96fdf8ac2693168d6b80866d0333b7&#34;&gt;&lt;strong&gt;修改share方式&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;test.md内容修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
Categories = [&amp;quot;test&amp;quot;]
Description = &amp;quot;test&amp;quot;
Tags = [&amp;quot;test&amp;quot;]
menu = &amp;quot;main&amp;quot;
title = &amp;quot;test hugo&amp;quot;
comments = true
date = 2014-08-09T05:04:40Z
+++


hello hugo! I am test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认的crisp主题在博文后面都有share方式，如红色框线部分：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20post%20share%20method.jpg&#34; alt=&#34;hugo post share method&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果想要删除这些share方式，可以删除header.html同目录下的share.html文件（或者注释）。删除share.html之后的显示结果为：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20delete%20share.jpg&#34; alt=&#34;hugo delete share&#34; /&gt;&lt;p/&gt;
&lt;p/&gt;&lt;/p&gt;

&lt;h2 id=&#34;删除author信息:be96fdf8ac2693168d6b80866d0333b7&#34;&gt;&lt;strong&gt;删除author信息&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;删除share之后，博文后面还有author信息，可以注释或删除掉header.html同目录下的author.html文件。删除author.html之后的效果为：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20delete%20author%20info%20after%20deleting%20share.jpg&#34; alt=&#34;hugo delete author&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建个人博客（二）：修改主题：颜色，字体，布局</title>
      <link>http://learnbetter.club/2016/06/hugo-2-update-sidebar/</link>
      <pubDate>Tue, 14 Jun 2016 10:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/hugo-2-update-sidebar/</guid>
      <description>

&lt;p&gt;上一篇博文中谈到了如何在本地使用hugo预览特定主题crisp，本文介绍主题的颜色，字体，布局的修改。&lt;/p&gt;

&lt;h2 id=&#34;修改主题侧边栏颜色:c3f6a68923e233951f19e3ad987dc958&#34;&gt;&lt;strong&gt;修改主题侧边栏颜色&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;crisp主题的侧边栏默认是白色，如果想改个颜色咋办？
到github仓库 &lt;a href=&#34;https://github.com/penn201500/hugo-crisp-theme-for-blog/&#34;&gt;https://github.com/penn201500/hugo-crisp-theme-for-blog/&lt;/a&gt; 获取 hugo-crisp-theme-for-blog/mysite/themes/crisp/layouts/partials/criticalpath.html  文件，替换本地themes目录下的同名文件，如
 E:\github_projects\my_blogs\mysite\themes\hugo-theme-crisp\layouts\partials\criticalpath.html
 替换之后效果：
 &lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20bgcolor.jpg&#34; alt=&#34;hugo update sidebar bgcolor&#34; /&gt;
&lt;p/&gt;
&lt;p/&gt;&lt;/p&gt;

&lt;h2 id=&#34;修改主题字体:c3f6a68923e233951f19e3ad987dc958&#34;&gt;&lt;strong&gt;修改主题字体&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在criticalpath.html文件中，查找font-family。然后修改字体类型，大小，颜色等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body,html
{
    font-size: 1em;
    line-height: 1.65em;
    font-family:&amp;quot;Open Sans&amp;quot;,sans-serif;
    font-weight:300;color:#444
    background-color: #ecf0f1;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt;

&lt;p&gt;=======
&lt;p/&gt;
&lt;p/&gt;
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; origin/master&lt;/p&gt;

&lt;h2 id=&#34;修改侧边栏布局:c3f6a68923e233951f19e3ad987dc958&#34;&gt;&lt;strong&gt;修改侧边栏布局&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;侧边栏不想要头像？想添加links？只要github follow？
下面介绍如何实现这些需求&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.去掉头像&lt;/strong&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt;

&lt;p&gt;=======
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; origin/master
编辑layouts/partial目录下的header.html文件：
如：E:\github_projects\my_blogs\mysite\themes\hugo-theme-crisp\layouts\partials&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;
            &amp;lt;a id=&amp;quot;logo&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://www.gravatar.com/avatar/1a2807faf3cca1667ff6f04bf5886eff.png&amp;quot; alt=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{.Site.BaseURL}}&amp;quot;&amp;gt;{{.Site.Title}}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;{{.Description}}&amp;lt;/p&amp;gt;

            {{ partial &amp;quot;follow.html&amp;quot; . }}
            {{ partial &amp;quot;navigation.html&amp;quot; . }}
        &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;id = &amp;ldquo;logo&amp;rdquo;的这一行既是图片信息，替换图片，则将 imgsrc 连接替换。 取消图片则将这行注释或者删除。注释后效果如下：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20delete%20logo.jpg&#34; alt=&#34;delete logo&#34; /&gt;
&lt;p/&gt;
&lt;p/&gt;
&lt;strong&gt;2. 添加links&lt;/strong&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt;

&lt;p&gt;=======
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; origin/master
可以参考配置文件：&lt;a href=&#34;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/navigation.html&#34;&gt;https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/navigation.html&lt;/a&gt;
将与header.html同目录的navigation.html文件修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;hr class=&amp;quot;nav-site-separator&amp;quot;&amp;gt;
&amp;lt;h6&amp;gt;Links&amp;lt;/h6&amp;gt;
&amp;lt;nav class=&amp;quot;nav&amp;quot;&amp;gt;
      &amp;lt;ul class=&amp;quot;nav-list&amp;quot;&amp;gt;
        &amp;lt;font size=&amp;quot;3&amp;quot;&amp;gt;
        
           &amp;lt;li class=&amp;quot;nav-site&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://lilydjwg.is-programmer.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;依云的博客&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
           &amp;lt;li class=&amp;quot;nav-site&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://evilbinary.org/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;邪恶二进制&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
           &amp;lt;li class=&amp;quot;nav-site&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.wlman.cc/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;Consec &#39;s Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        
           &amp;lt;li class=&amp;quot;nav-site&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;http://www.linuxzen.com/&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;cold&#39;s world&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        &amp;lt;/font&amp;gt;
      &amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;li class=&amp;quot;nav-site&amp;quot;&amp;gt;&lt;/code&gt; 这一行可以编辑一个链接。
修改后效果如下：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20add%20links.jpg&#34; alt=&#34;add links&#34; /&gt;
&lt;p/&gt;
&lt;p/&gt;
&lt;strong&gt;3. 只需要github follow&lt;/strong&gt;
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/p&gt;

&lt;p&gt;=======
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; origin/master
crisp主题的follow方式有facebook，twitter，linkedin，github，google+, rss 。
下面介绍如何只留github follow方式（添加或删除其他的follow方式类似）
将同目录下的follow.html修改如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;follow-icons&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://github.com/penn201500&amp;quot; rel=&amp;quot;me&amp;quot;&amp;gt;&amp;lt;i class=&amp;quot;fa fa-github-square fa-2x&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图标使用的是fontawesome，可以从github fork：
&lt;a href=&#34;https://github.com/penn201500/Font-Awesome.git&#34;&gt;https://github.com/penn201500/Font-Awesome.git&lt;/a&gt;
或者访问fontawesome：
&lt;a href=&#34;http://fontawesome.io/icons/&#34;&gt;http://fontawesome.io/icons/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;修改follow.html的效果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20update%20follow%20method.jpg&#34; alt=&#34;update follow method&#34; /&gt;
&lt;p/&gt;
&lt;p/&gt;
&lt;strong&gt;4.增加tags和修改title&lt;/strong&gt;
4.1 修改title
将E:\github_projects\my_blogs\mysite目录下的config.toml文件修改为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://www.learnbetter.club&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;My Blog&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4.2 add tags
1.增加tags.html文件到header.html文件所在的目录。tags.html文件的内容为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h6 class=&amp;quot;sitetaglisttitle&amp;quot;&amp;gt;Tags&amp;lt;/h6&amp;gt;
&amp;lt;ul class=&amp;quot;sitetaglist&amp;quot;&amp;gt;
    {{ range first 10 .Site.Taxonomies.tags.ByCount }}
        {{ if ge .Count 1 }}
            &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;/tags/{{ .Name | urlize }}&amp;quot;&amp;gt;{{ .Name }} ({{ .Count }})&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
        {{ end }}
    {{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.并修改header.html：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;header id=&amp;quot;header&amp;quot;&amp;gt;
           &amp;lt;!--
            &amp;lt;a id=&amp;quot;logo&amp;quot; href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://www.gravatar.com/avatar/1a2807faf3cca1667ff6f04bf5886eff.png&amp;quot; alt=&amp;quot;{{ .Site.Title }}&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
            --&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{.Site.BaseURL}}&amp;quot;&amp;gt;{{.Site.Title}}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;{{.Description}}&amp;lt;/p&amp;gt;

            {{ partial &amp;quot;follow.html&amp;quot; . }}
            {{ partial &amp;quot;navigation.html&amp;quot; . }}
            {{ partial &amp;quot;tags.html&amp;quot; . }}  &amp;lt;!--增加tags--&amp;gt;
        &amp;lt;/header&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.修改E:\github_projects\my_blogs\mysite\content\content\test.md文件为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-05-29T23:56:41+08:00&amp;quot;
draft = true
title = &amp;quot;test&amp;quot;
tags = &amp;quot;test&amp;quot;
+++

hello hugo! I am test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;显示效果为：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20update%20title%20add%20tags.jpg&#34; alt=&#34;add tags and update title&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;如果有其他好的博客主题，且托管在github上，可以clone到本地进行修改尝试&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何使用hugo搭建个人博客（一）：在win7上使用hugo</title>
      <link>http://learnbetter.club/2016/06/hugo-1-use-it-in-win7/</link>
      <pubDate>Sun, 12 Jun 2016 19:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/hugo-1-use-it-in-win7/</guid>
      <description>

&lt;p&gt;如何使用hugo搭建个人博客？
按照创建步骤有：
1. 在win7上使用hugo，能够本地预览（就是本文了）
2. 修改主题：颜色，字体，布局（后续）
3. 添加follow与修改share的方式（后续）
3. 添加评论系统disqus（后续）
4. 添加站内搜索（后续）
5. 放到个人vps或者推到第三方托管（推荐阅读）&lt;/p&gt;

&lt;p&gt;Hugo 是一个用 Go 语言编写的静态网站生成器，简单易用。类似的静态网站生成器还有&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;Hugo在windows 7上的使用如下：&lt;/p&gt;

&lt;h2 id=&#34;1-安装hugo:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;1. 安装hugo&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&#34;1-1-安装go:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;1.1 安装go&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;可以在go github上下载 &lt;a href=&#34;https://golang.org/dl/&#34;&gt;go 1.6&lt;/a&gt;
双击exe文件，一路next安装。安装完成之后，查看go安装结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/go_valid.jpg&#34; alt=&#34;go&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-2-安装hugo:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;1.2 安装hugo&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://download.csdn.net/detail/justheretobe/9529014&#34;&gt;hugo for win64&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;或者官网下载：&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;
下载后双击exe，一路next即可。查看安装结果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo_install_ok.jpg&#34; alt=&#34;hugo install ok&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-3-安装git-用来下载主题和管理博客文件的修改信息:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;1.3. 安装git（用来下载主题和管理博客文件的修改信息）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;博客文件中的修改可以使用git进行版本管理，快速使用教程见: [廖雪峰 git教程]（&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000）&#34;&gt;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000）&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-创建站点:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;2. 创建站点&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;创建一个目录，用来存放站点文件，然后使用hugo命令生成新站点：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hugo&#34;&gt;mkdir my_logs
hugo new site  mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行结果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20new%20site%20mysite.jpg&#34; alt=&#34;hugo new site mysite&#34; /&gt;&lt;/p&gt;

&lt;p&gt;文件结构的含义是：
原文解释见 &lt;a href=&#34;https://gohugo.io/content/&#34;&gt;https://gohugo.io/content/&lt;/a&gt;
|- archetypes           ：存放default.md，头文件格式
|- content                ：content目录存放博客文章（markdown文件）
|- data                     ：存放自定义模版，导入的toml文件（或json，yaml）
|- layouts                ：layouts目录存放的是网站的模板文件
|- static                   ：static目录存放图片，css等静态资源
|- config.toml         ：config.toml是网站的配置文件&lt;/p&gt;

&lt;h2 id=&#34;3-选择主题:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;3. 选择主题&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在mysite目录下新建一个themes文件夹，存放主题文件。
本例选择使用crisp主题，可以直接下载crisp主题：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-hugo&#34;&gt;mkdir themes
cd themes
git clone https://github.com/Zenithar/hugo-theme-crisp.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下载完成后：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20download%20crisp%20theme.jpg&#34; alt=&#34;hugo download crisp theme&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-本地预览:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;4. 本地预览&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在cmd中启动hugo server：
hugo server &amp;ndash;theme=hugo-theme-crisp &amp;ndash;buildDrafts &amp;ndash;watch&lt;/p&gt;

&lt;p&gt;启动命令说明：
&amp;ndash;theme 用于选择主题
&amp;ndash;watch 用于实时监控博客文件（配置文件和博客内容）的变化，方便调试&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20start%20local%20server.jpg&#34; alt=&#34;hugo start local server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后在浏览器中打开 &lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20local%20server.jpg&#34; alt=&#34;hugo local server view&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-编写博客内容:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;5. 编写博客内容&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在content目录中创建和编写test.md：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20new%20content-test-md%20file%20.jpg&#34; alt=&#34;hugo new post test.md file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以在localserver:1313中看到效果：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20new%20content-test-md%20file%20view1.jpg&#34; alt=&#34;localserver view test.md&#34; /&gt;&lt;/p&gt;

&lt;p&gt;打开test ：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20new%20content-test-md%20file%20view2.jpg&#34; alt=&#34;localserver view test.md  2&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-查看更多themes以及主题demo:1b0e02e01d53cd8c42d3f417a290b58b&#34;&gt;&lt;strong&gt;6. 查看更多themes以及主题Demo&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;查看更多主题可以访问：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/hugo%20themes%20view--crisp.jpg&#34; alt=&#34;hugo themes&#34; /&gt;&lt;/p&gt;

&lt;p&gt;查看crisp主题的Demo：
&lt;img src=&#34;http://o7ubfyghw.bkt.clouddn.com/crisp%20demo%20site%20with%20blogs.jpg&#34; alt=&#34;huto crisp theme demo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go is cool</title>
      <link>http://learnbetter.club/2016/06/go_is_cool/</link>
      <pubDate>Wed, 01 Jun 2016 05:04:40 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/2016/06/go_is_cool/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Search Results</title>
      <link>http://learnbetter.club/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>penn201500@gmail.com (penn)</author>
      <guid>http://learnbetter.club/search/</guid>
      <description>&lt;script&gt;
  (function() {
    var cx = &#39;009059558632698478175:komsd19zxh0&#39;;
    var gcse = document.createElement(&#39;script&#39;);
    gcse.type = &#39;text/javascript&#39;;
    gcse.async = true;
    gcse.src = &#39;https://cse.google.com/cse.js?cx=&#39; + cx;
    var s = document.getElementsByTagName(&#39;script&#39;)[0];
    s.parentNode.insertBefore(gcse, s);
  })();
&lt;/script&gt;
&lt;gcse:searchresults-only&gt;&lt;/gcse:searchresults-only&gt;  </description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Learn Better, Learn More</title>
  <subtitle>学不可以已</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://learnbetter.club/"/>
  <updated>2016-08-30T07:58:29.778Z</updated>
  <id>http://learnbetter.club/</id>
  
  <author>
    <name>penn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>汉诺塔游戏</title>
    <link href="http://learnbetter.club/2016/08/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E6%B8%B8%E6%88%8F/"/>
    <id>http://learnbetter.club/2016/08/30/汉诺塔游戏/</id>
    <published>2016-08-30T14:04:40.000Z</published>
    <updated>2016-08-30T07:58:29.778Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="游戏规则："><a href="#游戏规则：" class="headerlink" title="游戏规则："></a><strong>游戏规则：</strong></h3><p>有A,B,C三根针，将A针上N个从小到大叠放的盘子移动到C针，一次只能移动一个，不重复移动，小盘子必须在大盘子上面。</p>
<h3 id="关键分析："><a href="#关键分析：" class="headerlink" title="关键分析："></a><strong>关键分析：</strong></h3><p>将N-1个盘子从A移动到B，然后将第N个盘子从A移动到C。<br>剩下N-1个盘子需要从B移动到C，此时的中转站则从B变成了A（鉴于这时盘子都在B针），目标仍然是C针。<br>下一次重复的时候，只剩下A上的N-2个盘子需要移动（N-1与N都已经移动到了C），中转站又变成B，目标不变仍然是C针。<br>……整个过程中，变化的只是中转站（在A与B之间轮换），以及剩下那些所需要移动的盘子的总数（越来越少）而已。</p>
<h3 id="伪代码："><a href="#伪代码：" class="headerlink" title="伪代码："></a><strong>伪代码：</strong></h3><p>FUNCTION MoveTower(disk, source, dest, spare):<br>IF disk == 0, THEN:<br>    move disk from source to dest<br>ELSE:<br>    MoveTower(disk - 1, source, spare, dest)   // Step 1 above<br>    move disk from source to dest              // Step 2 above<br>    MoveTower(disk - 1, spare, dest, source)   // Step 3 above<br>END IF</p>
<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"></div><div class="line">count = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(n, source, destination)</span>:</span></div><div class="line">    <span class="keyword">global</span> count</div><div class="line">    print(<span class="string">"move disk &#123;0&#125; from &#123;1&#125; to &#123;2&#125; "</span>.format(n, source, destination))</div><div class="line">    count = count + <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi_tower</span><span class="params">(n, source, spare, destination)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &gt;= <span class="number">1</span>:</div><div class="line">        hanoi_tower(n<span class="number">-1</span>, source, destination, spare)</div><div class="line">        move(n, source, destination)</div><div class="line">        hanoi_tower(n<span class="number">-1</span>, spare, source, destination)</div><div class="line"></div><div class="line">hanoi_tower(<span class="number">3</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>)</div><div class="line">print(<span class="string">"the move count is :"</span>,count)</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">move disk 1 from A to C </div><div class="line">move disk 2 from A to B </div><div class="line">move disk 1 from C to B </div><div class="line">move disk 3 from A to C </div><div class="line">move disk 1 from B to A </div><div class="line">move disk 2 from B to C </div><div class="line">move disk 1 from A to C </div><div class="line">the move count is : 7</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>参考：</strong><br><a href="http://www.zhihu.com/question/24385418/answer/46241635" target="_blank" rel="external">http://www.zhihu.com/question/24385418/answer/46241635</a></p>
<p><a href="http://www.zhihu.com/question/24385418" target="_blank" rel="external">http://www.zhihu.com/question/24385418</a></p>
<p><a href="http://www.cs.cmu.edu/~cburch/survey/recurse/hanoiimpl.html" target="_blank" rel="external">hanoi塔游戏规则图示及分析</a></p>
<p><a href="http://stackoverflow.com/questions/17506947/local-variable-count-referenced-before-assignment" target="_blank" rel="external">http://stackoverflow.com/questions/17506947/local-variable-count-referenced-before-assignment</a></p>
]]></content>
    
    <summary type="html">
    
      Algorithm
    
    </summary>
    
      <category term="Algorithm" scheme="http://learnbetter.club/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="http://learnbetter.club/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>linux mint 的截图工具 shutter的快捷键</title>
    <link href="http://learnbetter.club/2016/08/30/linux%20mint%20%E7%9A%84%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7%20shutter%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://learnbetter.club/2016/08/30/linux mint 的截图工具 shutter的快捷键/</id>
    <published>2016-08-30T13:04:40.000Z</published>
    <updated>2016-08-30T07:57:28.632Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>在linux mint上使用shutter，可以通过快捷键提高使用舒适度</p>
<p>1.找到“键盘”，设置应用程序和快捷键<br><img src="http://o7ubfyghw.bkt.clouddn.com/set%20shutter%20shortcut%2001.jpg" alt=""></p>
<p>2.设置应用程序快捷键为ctrl+alt+a<br><img src="http://o7ubfyghw.bkt.clouddn.com/set%20shutter%20shortcut%2002.jpg" alt=""></p>
<p>在需要截图的时候，调用快捷键即可</p>
<p>在shutter的“编辑–&gt; 首选项” 中可以设置保存路径、行为等</p>
]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="http://learnbetter.club/categories/Linux/"/>
    
    
      <category term="shutter" scheme="http://learnbetter.club/tags/shutter/"/>
    
  </entry>
  
  <entry>
    <title>linux mint上推送更新至github的设置，以及git使用(blog)</title>
    <link href="http://learnbetter.club/2016/08/30/linux%20mint%E4%B8%8A%E6%8E%A8%E9%80%81%E6%9B%B4%E6%96%B0%E8%87%B3github%E7%9A%84%E8%AE%BE%E7%BD%AE%EF%BC%8C%E4%BB%A5%E5%8F%8Agit%E4%BD%BF%E7%94%A8(blog)/"/>
    <id>http://learnbetter.club/2016/08/30/linux mint上推送更新至github的设置，以及git使用(blog)/</id>
    <published>2016-08-30T12:04:40.000Z</published>
    <updated>2016-08-30T07:56:43.784Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a><strong>环境</strong></h3><p>Linux Mint 17.3<br>git version 2.7.4</p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置:"></a><strong>设置:</strong></h3><p>1.生成密钥对<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~ $ ssh-keygen -t rsa -C &quot;xxxx@gmail.com&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/penn/.ssh/id_rsa): </div><div class="line">Created directory &apos;/home/penn/.ssh&apos;.</div><div class="line">Enter passphrase (empty for no passphrase): </div><div class="line">Enter same passphrase again: </div><div class="line">Your identification has been saved in /home/penn/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /home/penn/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:</div><div class="line">SHA256:xxxxxxxxxxxxxxxxxxxxxxxxx xxxx@gmail.com</div><div class="line">The key&apos;s randomart image is:</div><div class="line">+---[RSA 2048]----+</div><div class="line">|              ooo|</div><div class="line">|  .        . . ..|</div><div class="line">| . .    . o . o .|</div><div class="line">|E   . .. o .   + |</div><div class="line">| .   ...S o   .  |</div><div class="line">|     . =.+.    o.|</div><div class="line">|      +   @.X . *|</div><div class="line">|     . =.= +.B.o.|</div><div class="line">|      . . ..++o  |</div><div class="line">+----[SHA256</div><div class="line"></div><div class="line">penn@Linux-Mint18 ~ $ cd .ssh</div><div class="line">penn@Linux-Mint18 ~/.ssh $ ls</div><div class="line">id_rsa  id_rsa.pub</div><div class="line">penn@Linux-Mint18 ~/.ssh $ cat id_rsa.pub </div><div class="line">ssh-rsa xxxxxxxxxxxxxxxxxxxxxx xxxx@gmail.com</div></pre></td></tr></table></figure></p>
<p>2.将公钥添加到github</p>
<p>3.检查配置结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/.ssh $ ssh git@github.com</div><div class="line">The authenticity of host &apos;github.com (192.30.253.113)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is SHA256:xxxxxxxxxxxxxxxxxx</div><div class="line">Are you sure you want to continue connecting (yes/no)? y</div><div class="line">Please type &apos;yes&apos; or &apos;no&apos;: yes</div><div class="line">Warning: Permanently added &apos;github.com,192.30.253.113&apos; (RSA) to the list of known hosts.</div><div class="line">PTY allocation request failed on channel 0</div><div class="line">Hi xxxx! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</div><div class="line">Connection to github.com closed.</div></pre></td></tr></table></figure></p>
<p>4.git全局配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/.ssh $ git config --global user.name &quot;xxxx&quot;</div><div class="line">penn@Linux-Mint18 ~/.ssh $ git config --global user.email &quot;xxxx@gmail.com&quot;</div></pre></td></tr></table></figure></p>
<p>5.创建本地git目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/.ssh $ cd </div><div class="line">penn@Linux-Mint18 ~ $ cd Desktop/</div><div class="line">penn@Linux-Mint18 ~/Desktop $ cd github_projects/</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects $ ls</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects $ mkdir github_hexo</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects $ ls</div><div class="line">github_hexo</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects $ cd github_hexo/</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ ls</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git init</div><div class="line">初始化空的 Git 仓库于 /home/penn/Desktop/github_projects/github_hexo/.git/</div></pre></td></tr></table></figure></p>
<p>6.添加github远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git remote add github.io https://github.com/xxxx/xxxx.github.io.git</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git remote</div><div class="line">github.io</div></pre></td></tr></table></figure></p>
<p>7.拉取github项目到本地git目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git fetch github.io </div><div class="line">来自 https://github.com/xxxx/xxxx.github.io</div><div class="line"> * [新分支]          master     -&gt; github.io/master</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git status</div><div class="line">位于分支 master</div></pre></td></tr></table></figure></p>
<p>8.提交新文件到remote<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ touch test.md</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git status</div><div class="line">位于分支 master</div><div class="line">未跟踪的文件:</div><div class="line">  （使用 &quot;git add &lt;文件&gt;...&quot; 以包含要提交的内容）</div><div class="line"></div><div class="line">	test.md</div><div class="line"></div><div class="line">提交为空，但是存在尚未跟踪的文件（使用 &quot;git add&quot; 建立跟踪）</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git add .</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git commit -m &quot;test&quot;</div><div class="line">[master 0fe3106] test</div><div class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</div><div class="line"> create mode 100644 test.md</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git status</div><div class="line">位于分支 master</div><div class="line">无文件要提交，干净的工作区</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git push -u github.io master</div><div class="line">Username for &apos;https://github.com&apos;: xxxx</div><div class="line">Password for &apos;https://xxxx@github.com&apos;: </div><div class="line">To https://github.com/xxxx/xxxx.github.io.git</div><div class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</div><div class="line">error: 无法推送一些引用到 &apos;https://github.com/xxxx/xxxx.github.io.git&apos;</div><div class="line">提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</div><div class="line">提示：再次推送前，先与远程变更合并（如 &apos;git pull ...&apos;）。详见</div><div class="line">提示：&apos;git push --help&apos; 中的 &apos;Note about fast-forwards&apos; 小节。</div></pre></td></tr></table></figure></p>
<p>9.解决冲突<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git merge github.io/master -m &quot;merge local to remote&quot;</div><div class="line">Merge made by the &apos;recursive&apos; strategy.</div><div class="line"> 2016/06/12/hugo 1 use it in win7/index.html                                |  753 ++++++++++++++++++</div><div class="line"> 2016/06/14/hugo 2 update sidebar/index.html                                |  782 ++++++++++++++++++</div><div class="line"> ...</div><div class="line"> ...</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ ls</div><div class="line">2016      archives  categories  commonweal  favicon_32X32.ico            images      js    README.md   sitemap.xml  test.md</div><div class="line">404.html  atom.xml  CNAME       css         google6f9ffd2313a65622.html  index.html  page  robots.txt  tags         vendors</div></pre></td></tr></table></figure></p>
<p>10.再次push到remote，成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $ git push -u github.io master</div><div class="line">Username for &apos;https://github.com&apos;: xxxx</div><div class="line">Password for &apos;https://xxxx@github.com&apos;: </div><div class="line">对象计数中: 10, 完成.</div><div class="line">Delta compression using up to 8 threads.</div><div class="line">压缩对象中: 100% (5/5), 完成.</div><div class="line">写入对象中: 100% (10/10), 1.05 KiB | 0 bytes/s, 完成.</div><div class="line">Total 10 (delta 1), reused 2 (delta 0)</div><div class="line">To https://github.com/xxxx/xxxx.github.io.git</div><div class="line">   8d2d9fa..accb66c  master -&gt; master</div><div class="line">分支 master 设置为跟踪来自 github.io 的远程分支 master。</div><div class="line">penn@Linux-Mint18 ~/Desktop/github_projects/github_hexo $</div></pre></td></tr></table></figure></p>
<p>11.git log<br>可以看当前git仓库的修改记录<br>git log 文件名 可以看指定文件或者文件夹的log<br>也可以在指定的文件夹内使用<br>git log ./ 也可以看执行此命令的文件夹的修改记录</p>
<p>git show <commit-hash-id>查看某次commit的修改内容<br>git log -p <filename>查看某个文件的修改历史<br>git log -p -2查看最近2次的更新内容<br>git log –stat 查阅最近的提交修改</filename></commit-hash-id></p>
<p>12.在某些情况下我们可能希望查看目标文件两个版本之间的差异。 查看这个文件<strong>任意两个版本的差异</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff &lt;hashcode-before-right&gt; &lt;hashcode&gt; &lt;filename&gt;</div></pre></td></tr></table></figure></p>
<p>13.团队开发或者做Code Review的时你可能需要用到：<br>查看某个文件的包含提交人员，日期、版本号等记录信息，不包括修改详情：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git whatchanged &lt;filename&gt;</div></pre></td></tr></table></figure></p>
<p>14.在review时查看某次提交修改详情：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show &lt;hashcode&gt;</div></pre></td></tr></table></figure></p>
<p>15.我们打算查看某个文件在某次提交中的修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show &lt;hashcode&gt; &lt;filename&gt;</div></pre></td></tr></table></figure></p>
<p>我们分析后发现不是这几次的修改造成的，所以我们希望查看这个文件所有的提交记录。<br>查看仅这个文件的所有历史记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline &lt;filename&gt;</div></pre></td></tr></table></figure></p>
<p>16.gitignore的使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">S1:      touch  .gitignore     #创建gitignore隱藏文件  </div><div class="line">S2:      vim    .gitignore     #编辑文件，加入指定文件  </div><div class="line">         #下面是我的gitignore文件的内容  </div><div class="line">         #忽略gitignore文件  </div><div class="line">         .gitignore  </div><div class="line">         #忽略后缀名为.o和.a的文件  </div><div class="line">         *.[oa]  </div><div class="line">         #显示指定忽略名称为main的文件  </div><div class="line">         main  </div><div class="line">文件.gitignore的格式规范：</div><div class="line">A：#为注释   </div><div class="line">B：可以使用shell所使用的正则表达式来进行模式匹配   </div><div class="line">C：匹配模式最后跟&quot;/&quot;说明要忽略的是目录 </div><div class="line">D：使用！取反（例如目录中包含  test.a，并且gitignore文件中包含  *.[oa]，如果在文件中加入 ！test.a   表明忽略除test.a文件以外的后缀名为.a或者.o的文件）</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="http://learnbetter.club/categories/Linux/"/>
    
    
      <category term="git github" scheme="http://learnbetter.club/tags/git-github/"/>
    
  </entry>
  
  <entry>
    <title>linux mint wine 安装qq</title>
    <link href="http://learnbetter.club/2016/08/29/linux%20mint%20wine%20%E5%AE%89%E8%A3%85qq/"/>
    <id>http://learnbetter.club/2016/08/29/linux mint wine 安装qq/</id>
    <published>2016-08-29T15:04:40.000Z</published>
    <updated>2016-08-30T07:55:41.032Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>平台： linux mint 18</p>
<p>有些windows的应用在linux下也很需要，如QQ</p>
<p>可以使用wine来安装</p>
<p>1.安装wine<br><img src="http://o7ubfyghw.bkt.clouddn.com/install%20wine.jpg" alt=""></p>
<p>2.安装qq<br>不需要特殊设置wine参数，直接wine安装qq<br><img src="http://o7ubfyghw.bkt.clouddn.com/wine_install_qq.jpg" alt=""></p>
<p>3.打开qq<br>可以写一个shell脚本 open_qq.sh：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line">   </div><div class="line">wine /home/penn/.wine/drive_c/Program\ Files\ \(x86\)/Tencent/QQ/Bin/QQ.exe</div></pre></td></tr></table></figure></p>
<p>然后<br>chmod +x open_qq.sh<br>source open_qq.sh<br>即可打开</p>
<p>4.碰到无法输入登录用户名的问题<br><img src="http://o7ubfyghw.bkt.clouddn.com/wine_cfg_for_qq_login.jpg" alt=""></p>
<p>5.登录成功，与windows下的qq效果一样。但不要关闭wine qq运行的terminal，否则qq会无响应</p>
]]></content>
    
    <summary type="html">
    
      Linux
    
    </summary>
    
      <category term="Linux" scheme="http://learnbetter.club/categories/Linux/"/>
    
    
      <category term="wine qq" scheme="http://learnbetter.club/tags/wine-qq/"/>
    
  </entry>
  
  <entry>
    <title>hexo quick start</title>
    <link href="http://learnbetter.club/2016/08/07/hello-world/"/>
    <id>http://learnbetter.club/2016/08/07/hello-world/</id>
    <published>2016-08-07T14:04:40.000Z</published>
    <updated>2016-08-09T15:07:22.492Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      hexo quick start
    
    </summary>
    
      <category term="hexo" scheme="http://learnbetter.club/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://learnbetter.club/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>python3 比较两个list的结构</title>
    <link href="http://learnbetter.club/2016/07/29/python3%20compare%202%20list%20structure/"/>
    <id>http://learnbetter.club/2016/07/29/python3 compare 2 list structure/</id>
    <published>2016-07-29T14:04:40.000Z</published>
    <updated>2016-08-07T04:30:50.486Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>比较两个list的结构，如：<br>a : [1,2,3]<br>b : [4,5,6]<br>则两个list的结构相同<br>如：<br>a : [1,2,3,[4,5,6,[7]]]<br>b : [1,[2],[3]]<br>则两个list的结构不同</p>
<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>print list的时候会将list的括号、逗号都打印出来。获取打印结果中的括号、逗号作为list的结构。比较即可得知两个list结构是否相同</p>
<h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div><div class="line"></div><div class="line">a : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">b : [<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">c : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>]]]</div><div class="line">d : [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,[<span class="number">8</span>]]]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(a,b)</span>:</span></div><div class="line">    <span class="comment">#get print out</span></div><div class="line">    <span class="comment">#how to use StringIO()</span></div><div class="line">    stdout : sys.stdout </div><div class="line">    stream : StringIO()</div><div class="line">    sys.stdout : stream</div><div class="line">    print(a)</div><div class="line">    print(b)</div><div class="line">    sys.stdout : stdout</div><div class="line">    </div><div class="line">    variable : str(stream.getvalue())</div><div class="line">    res : variable.split(<span class="string">'\n'</span>)</div><div class="line">    <span class="comment"># print(variable.split('\n'))</span></div><div class="line">    </div><div class="line">    str_a : res[<span class="number">0</span>]</div><div class="line">    str_b : res[<span class="number">1</span>]</div><div class="line">    </div><div class="line">    struct_a : <span class="string">''</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> res[<span class="number">0</span>] <span class="keyword">if</span> x <span class="keyword">in</span> [<span class="string">','</span>,<span class="string">'['</span>,<span class="string">']'</span>]])</div><div class="line">    struct_b : <span class="string">''</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> res[<span class="number">1</span>] <span class="keyword">if</span> x <span class="keyword">in</span> [<span class="string">','</span>,<span class="string">'['</span>,<span class="string">']'</span>]])</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="comment"># print(str_a)</span></div><div class="line">    <span class="comment"># print(str_b)</span></div><div class="line">    <span class="comment"># print(type(str_a))</span></div><div class="line">    <span class="comment"># print(struct_a)</span></div><div class="line">    <span class="comment"># print(struct_b)</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> struct_a :: struct_b: <span class="keyword">return</span> <span class="string">'True'</span></div><div class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> <span class="string">'False'</span></div><div class="line"></div><div class="line">print(compare(a,b))</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;print(compare(a,b))</div><div class="line">False</div><div class="line">&gt;&gt;&gt;print(compare(c,d))</div><div class="line">True</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>参考：</strong><br><a href="http://stackoverflow.com/questions/14197009/how-can-i-redirect-print-output-of-a-function-in-python" target="_blank" rel="external">http://stackoverflow.com/questions/14197009/how-can-i-redirect-print-output-of-a-function-in-python</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python3 比较两个list的结构
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python" scheme="http://learnbetter.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python3 fibonacci的高效解法</title>
    <link href="http://learnbetter.club/2016/07/28/python3%20fibonacci%20recursion%20and%20iteration/"/>
    <id>http://learnbetter.club/2016/07/28/python3 fibonacci recursion and iteration/</id>
    <published>2016-07-28T14:04:40.000Z</published>
    <updated>2016-08-07T04:33:48.200Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>使用python求解fibonacci函数</p>
<h2 id="解法一："><a href="#解法一：" class="headerlink" title="解法一："></a>解法一：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]:</div><div class="line">        <span class="keyword">return</span> n</div><div class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</div><div class="line"></div><div class="line">print(fib(<span class="number">10</span>))</div></pre></td></tr></table></figure>
<p>该方法直观好理解，但是效率低下。当n为50时，需要等好久才能得出结果。这是因为<br>fib(n) : fib(n-1) + fib(n-2)<br>fib(n-1) : fib(n-2) + fib(n-3)<br>…</p>
<p>当n的值越大时，重复的次数越多，导致效率低下。</p>
<h2 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">f_num : &#123;&#125;</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="comment">#print(f_num)</span></div><div class="line">    <span class="comment">#print(n)</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>]:</div><div class="line">        f_num[n] : n</div><div class="line">        <span class="keyword">return</span> f_num[n]</div><div class="line">    <span class="keyword">elif</span> n <span class="keyword">in</span> f_num:</div><div class="line">        print(f_num[n])</div><div class="line">        <span class="keyword">return</span> f_num[n]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        f_num[n] : fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</div><div class="line">        <span class="keyword">return</span> f_num[n]</div><div class="line"></div><div class="line">print(fib(<span class="number">986</span>))</div></pre></td></tr></table></figure>
<p>效率高了很多，原因在于，已经计算出来的 fib(x) 存储在了dictionary中，不用再去重复计算。</p>
<p>还有一种不必递归的解法（迭代）：</p>
<h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_iter</span><span class="params">(n)</span>:</span></div><div class="line">    pre : <span class="number">1</span></div><div class="line">    next : <span class="number">1</span></div><div class="line">    result : <span class="number">0</span></div><div class="line">    i : <span class="number">2</span></div><div class="line">    <span class="keyword">while</span> i &lt; n:</div><div class="line">        result : pre + next</div><div class="line">        pre : next</div><div class="line">        next : result</div><div class="line">        i +: <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">print(fib_iter(<span class="number">986</span>))</div></pre></td></tr></table></figure>
<hr>
]]></content>
    
    <summary type="html">
    
      python3 fibonacci的高效解法
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python 迭代 递归" scheme="http://learnbetter.club/tags/python-%E8%BF%AD%E4%BB%A3-%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>python3 脚本爬取今日百度热点新闻并存放到mysql数据库</title>
    <link href="http://learnbetter.club/2016/07/25/python3%20get%20Baidu%20hotNews%20and%20store%20in%20mysqlDB/"/>
    <id>http://learnbetter.club/2016/07/25/python3 get Baidu hotNews and store in mysqlDB/</id>
    <published>2016-07-25T15:04:40.000Z</published>
    <updated>2016-08-09T15:00:31.228Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p> python3.x 脚本爬取今日百度热点新闻并存放到mysql数据库</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p>安装pymysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pymysql</div></pre></td></tr></table></figure>
</li>
<li><p>下载安装mysql 5.x</p>
</li>
</ol>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol>
<li>python3.x 使用pymysql来与mysqlDB交互；可以使用 pip install pymysql 命令安装pymysql</li>
<li>pymysql的使用： <a href="http://www.runoob.com/python3/python3-mysql.html" target="_blank" rel="external">http://www.runoob.com/python3/python3-mysql.html</a></li>
<li>mysql的一些用法：<br>show databases;<br>use test;<br>show tables;<br>drop tables;</li>
<li>格式化时间：time.strftime(‘%Y-%m-%d %H:%M:%S’,time.localtime(time.time()))</li>
<li>某表不存在时创建该表：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sql : &quot;&quot;&quot;CREATE TABLE IF NOT EXISTS %s (</div><div class="line">            text  VARCHAR(200),</div><div class="line">            time  VARCHAR(200),</div><div class="line">            date VARCHAR(200))&quot;&quot;&quot; % (table,)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError, HTTPError</div><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> re</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetAndStore</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">pass</span></div><div class="line"></div><div class="line">    <span class="comment">#function</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printHotNews</span><span class="params">(self,url)</span>:</span></div><div class="line">        content : urllib.request.urlopen(url).read().decode(<span class="string">'gbk'</span>)</div><div class="line">        pattern : re.compile(<span class="string">'&lt;li class:"hd.*?&lt;strong&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?strong&gt;'</span>, re.S)</div><div class="line">        hotNews : re.findall(pattern, content)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> hotNews:</div><div class="line">            print(i) </div><div class="line">        <span class="keyword">return</span> hotNews    </div><div class="line">    </div><div class="line">    <span class="comment">#function can be reused</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">storeDB</span><span class="params">(self,table,news)</span>:</span></div><div class="line">        <span class="comment">#use dict store news</span></div><div class="line">        news_date : time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime(time.time()))</div><div class="line">        news_time : time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,time.localtime(time.time()))</div><div class="line">        <span class="comment">#test insert only 1 record</span></div><div class="line">        text : <span class="string">"'"</span> + news[<span class="number">0</span>] + <span class="string">"'"</span>  <span class="comment">#Chinese character and symbol</span></div><div class="line">        time_now : <span class="string">"'"</span> + news_time + <span class="string">"'"</span></div><div class="line">        date : <span class="string">"'"</span> + news_date + <span class="string">"'"</span></div><div class="line"></div><div class="line">        <span class="comment">#connect mysqlDB</span></div><div class="line">        conn : pymysql.connect(</div><div class="line">            host:<span class="string">'127.0.0.1'</span>, </div><div class="line">            port:<span class="number">3306</span>, </div><div class="line">            user:<span class="string">'root'</span>, </div><div class="line">            passwd:<span class="string">'root'</span>, </div><div class="line">            db:<span class="string">'test'</span>,</div><div class="line">            use_unicode:<span class="number">1</span>,</div><div class="line">            charset:<span class="string">'utf8'</span>)</div><div class="line">    </div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</div><div class="line">                <span class="comment">#create a table</span></div><div class="line">                sql : <span class="string">"""CREATE TABLE IF NOT EXISTS %s (</span></div><div class="line">                            text  VARCHAR(200),</div><div class="line">                            time  VARCHAR(200),</div><div class="line">                            date VARCHAR(200))""" % (table,)</div><div class="line">                cursor.execute(sql)</div><div class="line">                <span class="comment"># Create a new record</span></div><div class="line">                sql : <span class="string">"INSERT INTO %s (%s,%s,%s) VALUES (%s,%s,%s)"</span> % (table, <span class="string">'text'</span>, <span class="string">'date'</span>, <span class="string">'time'</span>, text, date, time_now)</div><div class="line">                cursor.execute(sql)</div><div class="line">                <span class="comment"># connection is not autocommit by default. So you must commit to save</span></div><div class="line">                <span class="comment"># your changes.</span></div><div class="line">                conn.commit()</div><div class="line">    </div><div class="line">            <span class="keyword">with</span> conn.cursor() <span class="keyword">as</span> cursor:</div><div class="line">                <span class="comment"># Read all records</span></div><div class="line">                sql : <span class="string">"SELECT * FROM (%s) "</span> %(table,)</div><div class="line">                cursor.execute(sql)</div><div class="line">                result : cursor.fetchall()</div><div class="line">                print(result)</div><div class="line">                cursor.close()</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            conn.close()</div><div class="line"></div><div class="line">        </div><div class="line"><span class="keyword">if</span> __name__ :: <span class="string">"__main__"</span>:    </div><div class="line">    <span class="comment">#variable</span></div><div class="line">    url : <span class="string">'http://news.baidu.com/'</span></div><div class="line">    instance1 : GetAndStore()  <span class="comment">#create an instance</span></div><div class="line">    </div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        response : urllib.request.urlopen(url)</div><div class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</div><div class="line">        <span class="comment"># http error</span></div><div class="line">        print(<span class="string">'Error code: '</span>, e.code)</div><div class="line">    <span class="keyword">except</span> URLError <span class="keyword">as</span> e:</div><div class="line">        <span class="comment"># url error</span></div><div class="line">        print(<span class="string">'Reason: '</span>, e.reason)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="comment"># excute function</span></div><div class="line">        instance1.printHotNews(url)</div><div class="line">        instance1.storeDB(<span class="string">"table1"</span>, instance1.printHotNews(url))</div></pre></td></tr></table></figure>
<h2 id="脚本执行结果"><a href="#脚本执行结果" class="headerlink" title="脚本执行结果"></a>脚本执行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">E:\github_projects\python-crawler&gt;python 2_get_hotNews_and_store_data_in_mysqldb.py</div><div class="line">习近平：扶贫工作不搞层层加码</div><div class="line">7月20日的国务院常务会定了这3件大事</div><div class="line">《寒战2》3D电影引争议 特效渣渣有圈钱之嫌</div><div class="line"></div><div class="line">习近平：扶贫工作不搞层层加码</div><div class="line">7月20日的国务院常务会定了这3件大事</div><div class="line">《寒战2》3D电影引争议 特效渣渣有圈钱之嫌</div><div class="line"></div><div class="line">((&apos;习近平：扶贫工作不搞层层加码&apos;, &apos;2016-07-22 03:12:12&apos;, &apos;2016-07-22&apos;),)</div></pre></td></tr></table></figure>
<hr>
<p><strong>参考：</strong></p>
<p><a href="http://stackoverflow.com/questions/14011160/how-to-use-python-mysqldb-to-insert-many-rows-at-once" target="_blank" rel="external">http://stackoverflow.com/questions/14011160/how-to-use-python-mysqldb-to-insert-many-rows-at-once</a></p>
<p><a href="http://www.mysqltutorial.org/python-mysql-insert/" target="_blank" rel="external">http://www.mysqltutorial.org/python-mysql-insert/</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python3 脚本爬取今日百度热点新闻并存放到mysql数据库
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python" scheme="http://learnbetter.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python脚本爬取今日百度热点新闻</title>
    <link href="http://learnbetter.club/2016/07/25/python3%20get%20Baidu%20hotNews/"/>
    <id>http://learnbetter.club/2016/07/25/python3 get Baidu hotNews/</id>
    <published>2016-07-25T14:04:40.000Z</published>
    <updated>2016-08-07T04:32:17.020Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>python脚本爬取今日百度热点新闻</p>
<h2 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h2><p>python脚本爬取今日百度热点新闻</p>
<h2 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h2><ol>
<li>python3使用 urllib.request.urlopen 去打开一个特定网址</li>
<li>中文可以加 decode(‘gbk’) 来避免乱码</li>
<li>re.S 用来解决跨行匹配的问题，用法： re.compile(pattern, re.S)</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">url : <span class="string">'http://news.baidu.com/'</span></div><div class="line">content : urllib.request.urlopen(url).read().decode(<span class="string">'gbk'</span>)</div><div class="line"></div><div class="line"><span class="comment">#Example：</span></div><div class="line"><span class="comment">#&lt;li class:"hdline0"&gt;</span></div><div class="line"><span class="comment">#&lt;i class:"dot"&gt;&lt;/i&gt;</span></div><div class="line"><span class="comment">#&lt;strong&gt;</span></div><div class="line"><span class="comment">#&lt;a href:"http://china.huanqiu.com/article/2016-07/9209287.html?from:bdwz " target:"_blank" class:"a3" mon:"ct:1&amp;amp;a:1&amp;amp;c:top&amp;amp;pn:0"&gt;xxx：扶贫工作不搞层层加码&lt;/a&gt;</span></div><div class="line"><span class="comment">#&lt;/strong&gt;</span></div><div class="line"><span class="comment">#&lt;/li&gt;</span></div><div class="line"></div><div class="line">pattern : re.compile(<span class="string">'&lt;li class:"hd.*?&lt;strong&gt;.*?&lt;a.*?&gt;(.*?)&lt;/a&gt;.*?strong&gt;'</span>, re.S)</div><div class="line">hotNews : re.findall(pattern, content)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> hotNews:</div><div class="line">  print(i)</div></pre></td></tr></table></figure>
<h2 id="hotnews-from-baidu"><a href="#hotnews-from-baidu" class="headerlink" title="hotnews from baidu:"></a>hotnews from baidu:</h2><p><img src="http://o7ubfyghw.bkt.clouddn.com/baidu%20hotnews.jpg" alt=""></p>
<h2 id="script-excute-result"><a href="#script-excute-result" class="headerlink" title="script excute result:"></a>script excute result:</h2><p><img src="http://o7ubfyghw.bkt.clouddn.com/crawler%20baidu%20hotNews.jpg" alt=""></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python脚本爬取今日百度热点新闻
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python" scheme="http://learnbetter.club/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu的ufw如何开放特定端口?</title>
    <link href="http://learnbetter.club/2016/07/15/ubuntu%20ufw%20port/"/>
    <id>http://learnbetter.club/2016/07/15/ubuntu ufw port/</id>
    <published>2016-07-15T15:04:40.000Z</published>
    <updated>2016-08-07T04:07:43.147Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>ufw是一个主机端的iptables类防火墙配置工具</p>
<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><blockquote>
<p>sudo apt-get install ufw</p>
</blockquote>
<h2 id="开启，建议默认关闭所有外部访问"><a href="#开启，建议默认关闭所有外部访问" class="headerlink" title="开启，建议默认关闭所有外部访问"></a>开启，建议默认关闭所有外部访问</h2><blockquote>
<p>sudo ufw enable</p>
<p>sudo ufw default deny</p>
</blockquote>
<h2 id="查看ufw现在已经开放的端口："><a href="#查看ufw现在已经开放的端口：" class="headerlink" title="查看ufw现在已经开放的端口："></a>查看ufw现在已经开放的端口：</h2><blockquote>
<p>ubuntu@localhost:~$ sudo ufw status<br>[sudo] password for ubuntu:<br>Status: active</p>
<table>
<thead>
<tr>
<th style="text-align:left">To</th>
<th style="text-align:center">Action</th>
<th style="text-align:center">From</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--</td>
<td style="text-align:center">-—–</td>
<td style="text-align:center">-—</td>
</tr>
<tr>
<td style="text-align:left">16430</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere</td>
</tr>
<tr>
<td style="text-align:left">30000</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere</td>
</tr>
<tr>
<td style="text-align:left">30001</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere</td>
</tr>
<tr>
<td style="text-align:left">1194/tcp</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere</td>
</tr>
<tr>
<td style="text-align:left">16430 (v6)</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere (v6)</td>
</tr>
<tr>
<td style="text-align:left">30000 (v6)</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere (v6)</td>
</tr>
<tr>
<td style="text-align:left">30001 (v6)</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere (v6)</td>
</tr>
<tr>
<td style="text-align:left">1194/tcp (v6)</td>
<td style="text-align:center">ALLOW</td>
<td style="text-align:center">Anywhere (v6)</td>
</tr>
<tr>
<td style="text-align:left">ubuntu@localhost:~$ </td>
</tr>
</tbody>
</table>
</blockquote>
<h2 id="新增端口"><a href="#新增端口" class="headerlink" title="新增端口"></a>新增端口</h2><blockquote>
<p>sudo ufw allow 8080</p>
</blockquote>
<h2 id="删除端口"><a href="#删除端口" class="headerlink" title="删除端口"></a>删除端口</h2><blockquote>
<p>sudo ufw delete allow 8080</p>
</blockquote>
<h2 id="允许特定来源的ip地址访问"><a href="#允许特定来源的ip地址访问" class="headerlink" title="允许特定来源的ip地址访问"></a>允许特定来源的ip地址访问</h2><blockquote>
<p>sudo ufw allow from 192.168.1.1</p>
</blockquote>
<h2 id="其他命令可以如此查看："><a href="#其他命令可以如此查看：" class="headerlink" title="其他命令可以如此查看："></a>其他命令可以如此查看：</h2><blockquote>
<p>ubuntu@localhost:~$ sudo ufw –help</p>
<p>Usage: ufw COMMAND</p>
<p>Commands:</p>
<p>enable:enables the firewall</p>
<p>disable:disables the firewall</p>
<p>……</p>
</blockquote>
<hr>
]]></content>
    
    <summary type="html">
    
      Linux ubuntu
    
    </summary>
    
      <category term="Linux" scheme="http://learnbetter.club/categories/Linux/"/>
    
    
      <category term="ufw" scheme="http://learnbetter.club/tags/ufw/"/>
    
  </entry>
  
  <entry>
    <title>python3 reversed+zip 顺时针遍历二维list</title>
    <link href="http://learnbetter.club/2016/07/10/python3%20reversed/"/>
    <id>http://learnbetter.club/2016/07/10/python3 reversed/</id>
    <published>2016-07-10T13:04:40.000Z</published>
    <updated>2016-08-07T04:32:11.676Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>之前的博文中谈到了 <a href="http://learnbetter.club/2016/06/python3-zip/">python3 zip的用法</a> ,现在看看reversed与zip配合，顺时针读取二维数组的方法。</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><strong>例题</strong></h2><p>注：例题来自 <a href="https://www.codewars.com/kata/snail/python" target="_blank" rel="external">https://www.codewars.com/kata/snail/python</a></p>
<blockquote>
<ol>
<li>给定一个n*n的矩阵，通过函数 snail（）得到按顺时针方向读取的list：<br>array : [[1,2,3],<pre><code>[4,5,6],
[7,8,9]]
</code></pre>snail(array) #:&gt; [1,2,3,6,9,8,7,4,5]<br>即：<br>[[1–&gt;2–&gt;3],<br> [4–&gt;5 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6],<br> [7&lt;–8&lt;–9]]</li>
<li>如果给定的矩阵为0*0，返回[[]]</li>
</ol>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a><strong>解法</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">snail</span><span class="params">(array)</span>:</span></div><div class="line">	<span class="comment">#1. Pop top row</span></div><div class="line">	<span class="comment">#2. Transpose and flip upside-down (same as rotate 90 degrees counter-clockwise)</span></div><div class="line">	<span class="comment">#3. Go to 1</span></div><div class="line">    <span class="comment">#and reference:</span></div><div class="line">    <span class="comment">#http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> list(array[<span class="number">0</span>]) + snail(list(reversed(list(zip(*array[<span class="number">1</span>:]))))) <span class="keyword">if</span> array <span class="keyword">else</span> []</div></pre></td></tr></table></figure>
<p>解题思路是：</p>
<ol>
<li>先取到矩阵的第一行元素</li>
<li>将去除了第一行元素的矩阵逆时针旋转90度：zip方法或transpose方法进行行列转换之后，再使用reverse方法将矩阵上下倒置</li>
<li>回到第一步</li>
</ol>
<h2 id="reverse方法"><a href="#reverse方法" class="headerlink" title="reverse方法"></a><strong>reverse方法</strong></h2><p>python doc：</p>
<blockquote>
<p><strong>reversed(seq)</strong><br>Return a reverse iterator. seq must be an object which has a <strong>reversed</strong>() method or supports the sequence protocol (the <strong>len</strong>() method and the <strong>getitem</strong>() method with integer arguments starting at 0).</p>
</blockquote>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">list(reversed([&apos;dream&apos;,&apos;a&apos;,&apos;have&apos;,&apos;I&apos;]))</div><div class="line">&gt;&gt;&gt;[&apos;I&apos;, &apos;have&apos;, &apos;a&apos;, &apos;dream&apos;]</div></pre></td></tr></table></figure>
<p>需要注意的是： reverse（）方法会改变操作对象，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a : [1,2,3,4]</div><div class="line">&gt;&gt;&gt; b : a</div><div class="line">\&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, 4]</div><div class="line">&gt;&gt;&gt; b.reverse()</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[4, 3, 2, 1]</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[4, 3, 2, 1]</div></pre></td></tr></table></figure>
<p>而reversed（）不会，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a : [1,2,3,4]</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[1, 2, 3, 4]</div><div class="line">&gt;&gt;&gt; b : a</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, 4]</div><div class="line">&gt;&gt;&gt; reversed(b)</div><div class="line">&lt;list_reverseiterator object at 0x0000022BD8937B70&gt;</div><div class="line">&gt;&gt;&gt; list(reversed(b))</div><div class="line">[4, 3, 2, 1]</div><div class="line">&gt;&gt;&gt; a</div><div class="line">[1, 2, 3, 4]</div><div class="line">&gt;&gt;&gt; b</div><div class="line">[1, 2, 3, 4]</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>参考</strong></p>
<p><a href="http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion" target="_blank" rel="external">http://stackoverflow.com/questions/1655685/traverse-2d-array-in-spiral-pattern-using-recursion</a></p>
<p><a href="http://stackoverflow.com/questions/726756/print-two-dimensional-array-in-spiral-order" target="_blank" rel="external">http://stackoverflow.com/questions/726756/print-two-dimensional-array-in-spiral-order</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python奇思妙解
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python3" scheme="http://learnbetter.club/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>linux mint 18上安装vim spf13 </title>
    <link href="http://learnbetter.club/2016/07/04/install%20vim%20spf13%20on%20linux%20mint%2018/"/>
    <id>http://learnbetter.club/2016/07/04/install vim spf13 on linux mint 18/</id>
    <published>2016-07-04T14:04:40.000Z</published>
    <updated>2016-08-07T04:31:18.963Z</updated>
    
    <content type="html"><![CDATA[<hr>
<hr>
<p>vim的终极配置spf13在linux_mint上的安装步骤如下（非gui）：</p>
<ol>
<li><p>安装vim<br>菜单–&gt;软件管理器–&gt;搜索“vim”。双击vim，安装<br><img src="http://o7ubfyghw.bkt.clouddn.com/mint%20install%20vim.jpg" alt="search and install vim"></p>
</li>
<li><p>安装vim-nox<br>与安装vim一样，搜索vim-nox；使用vim spf13中的neocomplete功能，需要vim有lua特性支持。vim-nox安装之后，查看vim的version信息：<br><img src="http://o7ubfyghw.bkt.clouddn.com/spf13%20lua%20support.jpg" alt="vim version with lua support"></p>
</li>
<li><p>安装spf13<br>访问spf13官网：<a href="http://vim.spf13.com/" target="_blank" rel="external">http://vim.spf13.com/</a><br>打开terminal，输入：</p>
<blockquote>
<p>curl <a href="http://j.mp/spf13-vim3" target="_blank" rel="external">http://j.mp/spf13-vim3</a> -L -o - | sh</p>
</blockquote>
<p>然后等待安装完成。<br>如果安装失败，提示git或者curl未安装:</p>
<blockquote>
<p>sudo apt-get install git<br>sudo apt-get install curl</p>
</blockquote>
</li>
<li><p>配置color-scheme，NerdTree，字体<br>安装完成之后，在.spf13-vim-3同一级目录下，有</p>
<blockquote>
<p>.vimrc<br>.vimrc.before<br>.vimrc.bundles<br>.viminfo</p>
</blockquote>
<p>使用molokai color-scheme：<br>可以在.vimrc.local中配置colorscheme，也可以vim中执行命令，如：<br><img src="http://o7ubfyghw.bkt.clouddn.com/colorshceme%20molokai.jpg" alt="molokai color-scheme"></p>
<p>配置NerdTree标签：需要在与.spf13-vim-3同一级目录下创建文件.NERDTreeBookmarks 文件中内容如下：</p>
<blockquote>
<p>.spf13-vim-3 ~/.spf13-vim-3</p>
</blockquote>
<p>这样会在NERDTree的标签中显示标签 <code>.spf13-vim-3</code><br><img src="http://o7ubfyghw.bkt.clouddn.com/spf13%20bookmarks.jpg" alt="nerdtree bookmark"></p>
<p>添加.vimrc.local:<br>与.spf13-vim-3同一级目录下创建文件.vimrc.local，用来做个性化配置。如：</p>
<blockquote>
<p>“::::::::::::::::快捷换行::::::::::::::::::<br>nmap <c-up> ddkP<br>nmap <c-down> ddp<br>vmap <c-up> xkP<code>[V</code>]<br>vmap <c-down> xp<code>[V</code>]<br>“ ::::::: 使nerd-tree 能够copy文件 ::::::: “<br>let g:NERDTreeCopyCmd : ‘cp -r ‘</c-down></c-up></c-down></c-up></p>
</blockquote>
<p>配置NerdTree打开时显示的路径：<br>在.vimrc.local中增加</p>
<blockquote>
<p>“ ::::::: 设置NERDTree打开时的目录 ::::::: “<br>cd /home/mint/python_projects<br>“ shortcut to toggle NerdTree<br>map <f2> :NERDTreeToggle<cr><br>“ open Nerd Tree in folder of file in active buffer<br>map <leader>nt :NERDTree %:p:h<cr><br>autocmd bufenter * if (winnr(“$”) :: 1 &amp;&amp; exists(“b:NERDTreeType”) &amp;&amp; b:NERDTreeType :: “primary”) |q| endif</cr></leader></cr></f2></p>
</blockquote>
<p>添加.vimrc.bundles.local 用来配置自己的插件，如：</p>
<blockquote>
<p>Bundle ‘mhinz/vim-startify’</p>
</blockquote>
<p>添加自己的插件之后，执行命令插件：</p>
<blockquote>
<p>vim +BundleInstall! +BundleClean +q</p>
</blockquote>
<p>在.vimrc.local中配置字体：</p>
<blockquote>
<p>“ ::::::: 自定义快捷键 ::::::: “<br>“ 设置着色模式和字体<br>colorscheme molokai<br>set guifont:Monaco:h11<br>“ AirLine             彩色状态栏<br>let g:airline_theme : ‘dark’                “ 设置主题</p>
</blockquote>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      vim spf13
    
    </summary>
    
      <category term="vim" scheme="http://learnbetter.club/categories/vim/"/>
    
    
      <category term="vim" scheme="http://learnbetter.club/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>获取两个字符串中最长的公共字符串</title>
    <link href="http://learnbetter.club/2016/06/26/longest%20common%20substring/"/>
    <id>http://learnbetter.club/2016/06/26/longest common substring/</id>
    <published>2016-06-26T13:04:40.000Z</published>
    <updated>2016-08-07T04:31:12.847Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a><strong>例题：</strong></h2><p>longest common substring<br>获取两个字符串中最长的公共字符串<br>如：<br>如果s1:’abcdefgh’，s2:’cdefgh’; s1与s2的最长公共字符串’cd’</p>
<p>例子：</p>
<blockquote>
<p>s1:’abcdefgh’，s2:’cdefgh’<br>lcs(s1,s2) ::&gt; ‘cd’</p>
</blockquote>
<h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a><strong>解法：</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lcs</span><span class="params">(s1,s2)</span>:</span></div><div class="line">    m : len(s1)</div><div class="line">    n : len(s2)</div><div class="line">    counter : [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(m+<span class="number">1</span>)]</div><div class="line">    longest : <span class="number">0</span></div><div class="line">    lcs_set : set()</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n+<span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> s1[i<span class="number">-1</span>] :: s2[j<span class="number">-1</span>]:</div><div class="line">                c : counter[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span></div><div class="line">                counter[i][j] : c</div><div class="line">                <span class="keyword">if</span> c &gt; longest:</div><div class="line">                    lcs_set : set()</div><div class="line">                    longest : c</div><div class="line">                    lcs_set.add(s1[i-c:i])</div><div class="line">                <span class="keyword">elif</span> c :: longest:</div><div class="line">                    lcs_set.add(s1[i-c:i])</div><div class="line">    <span class="keyword">return</span> lcs_set</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ :: <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">assert</span> lcs(<span class="string">'academy'</span>, <span class="string">'abracadabra'</span>) :: &#123;<span class="string">'acad'</span>&#125;</div><div class="line">    <span class="keyword">assert</span> lcs(<span class="string">'ababc'</span>, <span class="string">'abcdaba'</span>) :: &#123;<span class="string">'aba'</span>,<span class="string">'abc'</span>&#125;</div><div class="line">    <span class="keyword">assert</span> lcs(<span class="string">'abcdefgh'</span>, <span class="string">'cdefgh'</span>) :: &#123;<span class="string">'cdefgh'</span>&#125;</div><div class="line">    <span class="keyword">assert</span> lcs(<span class="string">'abcdefgh'</span>, <span class="string">''</span>) :: set()</div><div class="line">    print(<span class="string">'assert complete!'</span>)</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Anaconda3\python.exe E:/python_projects/test.py</div><div class="line"><span class="keyword">assert</span> complete!</div><div class="line"></div><div class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="解释："><a href="#解释：" class="headerlink" title="解释："></a><strong>解释：</strong></h2><ol>
<li>创建一个二维矩阵counter用来记录最长相同字符串的长度<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m : len(S)</div><div class="line">n : len(T)</div><div class="line">counter : [[<span class="number">0</span>]*(n+<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> range(m+<span class="number">1</span>)]</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%201.jpg" alt=""></p>
<ol>
<li>将s1中的每一个字符与s2中的每一个字符进行比较<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</div><div class="line">        <span class="keyword">if</span> S[i] :: T[j]:</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%202.jpg" alt=""></p>
<ol>
<li>如果s1的第i个字符和s2的第j个字符相同，则将矩阵counter[i+1][j+1]的值在counter[i][j]的基础上加1<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> S[i] :: T[j]:</div><div class="line">    c : counter[i][j] + <span class="number">1</span></div><div class="line">    counter[i+<span class="number">1</span>][j+<span class="number">1</span>] : c</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%203.jpg" alt=""></p>
<ol>
<li>如果现在的最长substring比以前的substring长，更新longest和set为新substring；如果新的substring和以前的substring一样长，直接将新的substring加入到set中<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> c &gt; longest:</div><div class="line">     lcs_set : set()</div><div class="line">     longest : c</div><div class="line">     lcs_set.add(S[i-c+<span class="number">1</span>:i+<span class="number">1</span>])</div><div class="line"><span class="keyword">elif</span> c :: longest:</div><div class="line">     lcs_set.add(S[i-c+<span class="number">1</span>:i+<span class="number">1</span>])</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://o7ubfyghw.bkt.clouddn.com/python%20longest%20common%20substring%204.jpg" alt=""></p>
<h2 id="寻找最长回文字符串"><a href="#寻找最长回文字符串" class="headerlink" title="寻找最长回文字符串"></a><strong>寻找最长回文字符串</strong></h2><p>上一篇博客<a href="http://blog.csdn.net/justheretobe/article/details/51761575" target="_blank" rel="external">获取string中的最长回文字符串</a>还可以使用寻找两个字符串最长公共substring的方法解答：</p>
<ol>
<li>s1:‘给定字符串’</li>
<li>s2:‘给定字符串的反序’</li>
<li>比较s1与s2, 获取两个字符串中最长的公共字符串，即为s1最长的回文字符串<br>代码：</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_palindrome</span> <span class="params">(s)</span>:</span></div><div class="line">    s1 : s</div><div class="line">    s2 : s1[::<span class="number">-1</span>]</div><div class="line">    <span class="keyword">if</span> len(s) :: <span class="number">1</span> : <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> len(s) :: <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      <span class="comment">#get the longest common string between s1 and reversed s1</span></div><div class="line">      m : [[<span class="number">0</span>] * (<span class="number">1</span> + len(s2)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span> + len(s1))]</div><div class="line">      longest, x_longest : <span class="number">0</span>, <span class="number">0</span></div><div class="line">      <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1</span> + len(s1)):</div><div class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1</span> + len(s2)):</div><div class="line">          <span class="keyword">if</span> s1[x - <span class="number">1</span>] :: s2[y - <span class="number">1</span>]:</div><div class="line">            m[x][y] : m[x - <span class="number">1</span>][y - <span class="number">1</span>] + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> m[x][y] &gt; longest:</div><div class="line">              longest : m[x][y]</div><div class="line">              x_longest : x</div><div class="line">          <span class="keyword">else</span>:</div><div class="line">              m[x][y] : <span class="number">0</span></div><div class="line"></div><div class="line">      <span class="comment">#if the longest common string is palindrome, return its length, else return 1</span></div><div class="line">      longest_string : s1[(x_longest-longest):x_longest]</div><div class="line">      <span class="keyword">if</span> longest_string :: longest_string[::<span class="number">-1</span>]: <span class="keyword">return</span> longest</div><div class="line">      <span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ :: <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'abcdab123454321'</span>) :: <span class="number">9</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'ab'</span>) :: <span class="number">1</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'aa'</span>) :: <span class="number">2</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">''</span>) :: <span class="number">0</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'abcdefba'</span>) :: <span class="number">1</span></div><div class="line">    print(<span class="string">'assert complete!'</span>)</div></pre></td></tr></table></figure>
<p>运行结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Anaconda3\python.exe E:/python_projects/test.py</div><div class="line"><span class="keyword">assert</span> complete!</div><div class="line"></div><div class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>更多longest_palindrome 解法，见：<br><a href="https://www.codewars.com/kata/longest-palindrome/solutions/python" target="_blank" rel="external">https://www.codewars.com/kata/longest-palindrome/solutions/python</a></p>
<hr>
<p><strong>Reference：</strong></p>
<p><a href="http://www.bogotobogo.com/python/python_solutions.php#longest_substring" target="_blank" rel="external">从给定string中找出至多只包含两个不同字符的最长substring</a></p>
<p>解释和主要代码来自：<br><a href="http://www.bogotobogo.com/python/python_longest_common_substring_lcs_algorithm_generalized_suffix_tree.php" target="_blank" rel="external">python_longest_common_substring_lcs_algorithm_generalized_suffix_tree</a></p>
]]></content>
    
    <summary type="html">
    
      python奇思妙解
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python3" scheme="http://learnbetter.club/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>获取string中的最长回文字符串</title>
    <link href="http://learnbetter.club/2016/06/26/longest%20palindrome/"/>
    <id>http://learnbetter.club/2016/06/26/longest palindrome/</id>
    <published>2016-06-26T11:04:40.000Z</published>
    <updated>2016-08-07T04:31:00.624Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a><strong>例题</strong></h2><p>获取string中的最长回文字符串</p>
<p>所谓回文字符串，即该字符串从左到右读和从右到左读是完全一样的。如“123454321”就是一个长度为9的回文字符串。<br>现要求使用python完成：对一个字符串s，找出其中为回文字符串的部分，并返回回文字符串的长度。规则为：</p>
<ol>
<li>如果s是1个字符，则长度为1，如“a”</li>
<li>如果s为空“”，则长度为0</li>
<li>如果s中有部分是回文字符串，返回最长回文字符串及其长度，如“aab”，最长回文字符串为“aa”，长度为2</li>
</ol>
<p>例子：</p>
<blockquote>
<p>“a” -&gt; 1<br>“aab” -&gt; 2<br>“abcde” -&gt; 1<br>“zzbaabcd” -&gt; 4<br>“” -&gt; 0</p>
</blockquote>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a><strong>解法</strong></h2><p>对该字符串的每个长度的组合都进行比较，如果是回文字符串，记录其长度。返回最长的回文字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_palindrome</span> <span class="params">(s)</span>:</span></div><div class="line">    longest : <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> s :: <span class="string">''</span>: <span class="keyword">return</span> <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> left <span class="keyword">in</span> range(len(s)):</div><div class="line">        <span class="keyword">for</span> right <span class="keyword">in</span> range(len(s), left, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> s[left:right] <span class="keyword">in</span> (s[left:right])[::<span class="number">-1</span>]:</div><div class="line">                <span class="comment">#longest : max(right-left, longest)</span></div><div class="line">                <span class="keyword">if</span> (right-left)&gt;longest:</div><div class="line">                    longest : right-left</div><div class="line">                    palindrome : s[left:right]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">else</span>: <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> palindrome</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ :: <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'abcdab123454321'</span>) :: <span class="string">'123454321'</span></div><div class="line">    <span class="keyword">assert</span> len(longest_palindrome(<span class="string">'abcdab123454321'</span>)) :: <span class="number">9</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'ab'</span>) :: <span class="string">'a'</span></div><div class="line">    <span class="keyword">assert</span> len(longest_palindrome(<span class="string">'ab'</span>)) :: <span class="number">1</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'aa'</span>) :: <span class="string">'aa'</span></div><div class="line">    <span class="keyword">assert</span> len(longest_palindrome(<span class="string">'aa'</span>)) :: <span class="number">2</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">''</span>) :: <span class="string">''</span></div><div class="line">    <span class="keyword">assert</span> len(longest_palindrome(<span class="string">''</span>)) :: <span class="number">0</span></div><div class="line">    <span class="keyword">assert</span> longest_palindrome(<span class="string">'abcdefba'</span>) :: <span class="string">'a'</span></div><div class="line">    <span class="keyword">assert</span> len(longest_palindrome(<span class="string">'abcdefba'</span>)) :: <span class="number">1</span></div><div class="line"></div><div class="line">    print(<span class="string">'assert complete!'</span>)</div></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">C:\Anaconda3\python.exe E:/python_projects/test.py</div><div class="line"><span class="keyword">assert</span> complete!</div><div class="line"></div><div class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      python奇思妙解
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python3" scheme="http://learnbetter.club/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>python3 sorted的用法</title>
    <link href="http://learnbetter.club/2016/06/19/python3%20sorted/"/>
    <id>http://learnbetter.club/2016/06/19/python3 sorted/</id>
    <published>2016-06-19T13:04:40.000Z</published>
    <updated>2016-08-07T04:32:06.450Z</updated>
    
    <content type="html"><![CDATA[<hr>
<hr>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a><strong>例题：</strong></h2><pre><code>先来看一个例题：
给你一个其中包含不同的英文字母和标点符号的文本，你要找到其中出现最多的字母，返回的字母必须是小写形式，
当检查最想要的字母时，不区分大小写，所以在你的搜索中 &quot;A&quot; == &quot;a&quot;。 请确保你不计算标点符号，数字和空格，只计算字母。
如果你找到 两个或两个以上的具有相同的频率的字母， 返回那个先出现在字母表中的字母。 例如 -- “one”包含“o”，“n”，“e”每个字母一次，因此我们选择“e”。
**输入:** 用于分析的文本 (str, unicode).
**输出:** 最常见的字母的小写形式。
**前提::**
密码只包含ASCII码符号
0 &lt; len(text) ≤ 105
</code></pre><p>使用sorted的解法如下：</p>
<pre><code>def checkio(text):
    #filter out not-alphebet char
    if text.isalpha():  text = text.lower()
    else:  text = &apos;&apos;.join([x.lower() for x in text if x.isalpha()])
    #print(text)

    from collections import Counter
    str_count = Counter(text)
    #print(str_count)
    #sorted with two parameters, the first parameter is the count of every char,the second is alphabet
    str_sorted = sorted(Counter(text).items(), key=lambda k: (k[1],k[0]))
    #print(str_sorted)
    #get the most wanted chars
    most_wanted_letters = [item for item in str_sorted if item[1] == str_sorted[len(str_sorted) - 1][1]]
    return most_wanted_letters[0][0]

if __name__ == &apos;__main__&apos;:
    #These &quot;asserts&quot; using only for self-checking and not necessary for auto-testing
    assert checkio(&quot;Hello World!&quot;) == &quot;l&quot;, &quot;Hello test&quot;
    assert checkio(&quot;How do you do?&quot;) == &quot;o&quot;, &quot;O is most wanted&quot;
    assert checkio(&quot;One&quot;) == &quot;e&quot;, &quot;All letter only once.&quot;
    assert checkio(&quot;Oops!&quot;) == &quot;o&quot;, &quot;Don&apos;t forget about lower case.&quot;
    assert checkio(&quot;AAaooo!!!!&quot;) == &quot;a&quot;, &quot;Only letters.&quot;
    assert checkio(&quot;abe&quot;) == &quot;a&quot;, &quot;The First.&quot;
    print(&quot;Start the long test&quot;)
    assert checkio(&quot;a&quot; * 9000 + &quot;b&quot; * 1000) == &quot;a&quot;, &quot;Long.&quot;
    print(&quot;The local tests are done.&quot;)
</code></pre><p>测试结果如下：<br><img src="http://o7ubfyghw.bkt.clouddn.com/checkio%20most%20wanted%20letter.jpg" alt="the most wanted letter"></p>
<h2 id="sorted的用法："><a href="#sorted的用法：" class="headerlink" title="sorted的用法："></a><strong>sorted的用法：</strong></h2><p>分析解法的关键代码</p>
<pre><code>str_sorted = sorted(Counter(text).items(), key=lambda k: (k[1],k[0]))    增加print测试:
#print(text)
&gt;&gt;&gt;checkio(&quot;Lorem ipsum dolor sit amet&quot;)
loremipsumdolorsitamet
&lt;&lt;&lt; &apos;m&apos;
#print(str_sorted)
&gt;&gt;&gt;checkio(&quot;Lorem ipsum dolor sit amet&quot;)
loremipsumdolorsitamet
Counter({&apos;m&apos;: 3, &apos;o&apos;: 3, &apos;i&apos;: 2, &apos;l&apos;: 2, &apos;s&apos;: 2, &apos;e&apos;: 2, &apos;t&apos;: 2, &apos;r&apos;: 2, &apos;d&apos;: 1, &apos;p&apos;: 1, &apos;a&apos;: 1, &apos;u&apos;: 1})
&lt;&lt;&lt; &apos;m&apos;
</code></pre><p>这里sorted使用<strong>两个关键字</strong>进行排序：<br>先按照每个字母出现的次数k[1]进行排序，然后安装字母表顺序对测试text中的内容k[0]进行排序.</p>
<p>python3手册对sorted的用法描述如下：</p>
<pre><code>sorted(iterable[, key][, reverse])

Return a new sorted list from the items in iterable.

Has two optional arguments which must be specified as keyword arguments.

key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).

reverse is a boolean value. If set to True, then the list elements are sorted as if each comparison were reversed.

Use functools.cmp_to_key() to convert an old-style cmp function to a key function.

The built-in sorted() function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).

For sorting examples and a brief sorting tutorial, see Sorting HOW TO.
</code></pre><p>sorted的第一个参数是一个迭代器，第二个参数是用来排序的key，第三个参数的排序数序：正序还是倒序<br>如：<br>第一个参数是迭代器</p>
<pre><code>&gt;&gt;&gt; sorted([36, 5, -12, 9, -21])
[-21, -12, 5, 9, 36]
</code></pre><p>第二个参数是用来排序的key</p>
<pre><code>&gt;&gt;&gt; sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]    key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。对比原始的list和经过key=abs处理过的list：
list = [36, 5, -12, 9, -21]
keys = [36, 5,  12, 9,  21]
然后sorted()函数按照keys进行排序，并按照对应关系返回list相应的元素：
keys排序结果 =&gt; [5, 9,  12,  21, 36]
最终结果     ====&gt; [5, 9, -12, -21, 36]
</code></pre><p>第三个参数决定正向还是反向排序：<br>要进行反向排序，不必改动key函数，可以传入第三个参数reverse=True：</p>
<pre><code>&gt;&gt;&gt; sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], key=str.lower, reverse=True)
[&apos;Zoo&apos;, &apos;Credit&apos;, &apos;bob&apos;, &apos;about&apos;]
</code></pre><p><strong>注：</strong>例题解法来自 <a href="https://checkio.org/user/penn201500/" target="_blank" rel="external">https://checkio.org/user/penn201500/</a><br>更优解法为：</p>
<pre><code>import string
​
def checkio(text):
    &quot;&quot;&quot;
    We iterate through latyn alphabet and count each letter in the text.
    Then &apos;max&apos; selects the most frequent letter.
    For the case when we have several equal letter,
    &apos;max&apos; selects the first from they.
    &quot;&quot;&quot;
    text = text.lower()
    return max(string.ascii_lowercase, key=text.count)
</code></pre><hr>
<p><strong>参考：</strong></p>
<p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318230588782cac105d0d8a40c6b450a232748dc854000" target="_blank" rel="external">廖雪峰官网 sorted方法</a></p>
<p><a href="https://checkio.org/mission/most-wanted-letter/" target="_blank" rel="external">checkio: most wanted letter</a></p>
<p><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014318230588782cac105d0d8a40c6b450a232748dc854000" target="_blank" rel="external">sorted()函数</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python奇思妙解
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python3" scheme="http://learnbetter.club/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>python3 zip的用法</title>
    <link href="http://learnbetter.club/2016/06/19/python3%20zip/"/>
    <id>http://learnbetter.club/2016/06/19/python3 zip/</id>
    <published>2016-06-19T11:04:40.000Z</published>
    <updated>2016-08-07T04:32:00.847Z</updated>
    
    <content type="html"><![CDATA[<hr>
<hr>
<h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a><strong>例子：</strong></h2><blockquote>
<p>井字游戏，有时也被称为“进攻和防守”，是一个两人玩家（X和O）轮流标志着3×3的网格的空间的连珠游戏。最先在任意一条直线（水平线，垂直线或对角线）上成功连接三个标记的一方获胜。</p>
<p>但我们不去玩这个游戏。你将是这个游戏的裁判。你被赋予游戏的结果，以及你必须判断游戏是平局还是有人胜出，以及谁将会成为最后的赢家。如果X玩家获胜，返回“X”。如果O玩家获胜，返回“O”。如果比赛是平局，返回“D”。</p>
<p>x-o-referee</p>
<p>游戏的结果是作为字符串形式的列表，其中“X”和“O”是玩家的标志，“.”是空格。</p>
<p><strong>输入:</strong> 游戏结果作为字符串形式的列表(Unicode)。</p>
<p><strong>输出:</strong> “X”，“O”或“D”作为字符串形式。</p>
<p><strong>范例:</strong></p>
<p>checkio([<br>    “X.O”,<br>    “XX.”,<br>    “XOO”]) == “X”</p>
<p>checkio([<br>    “OO.”,<br>    “XOX”,<br>    “XOX”]) == “O”</p>
<p>checkio([<br>    “OOX”,<br>    “XXO”,<br>    “OXX”]) == “D”</p>
<p><strong>如何使用：</strong> 此任务中的概念将有助于您遍历数据类型。这还可以用在游戏的算法上，让你知道如何去检查结果。</p>
</blockquote>
<p><strong>最多推荐的解法：</strong></p>
<pre><code>def checkio(result):
    rows = result
    cols = map(&apos;&apos;.join, zip(*rows))
    diags = map(&apos;&apos;.join, zip(*[(r[i], r[2 - i]) for i, r in enumerate(rows)]))
    lines = rows + list(cols) + list(diags)
​
    return &apos;X&apos; if (&apos;XXX&apos; in lines) else &apos;O&apos; if (&apos;OOO&apos; in lines) else &apos;D&apos;
</code></pre><p>上面的最多推荐的解法，步骤是：</p>
<p><strong>1.将列表result中的3个元素拆开成3个tuple（tuple是列的元素组合）</strong></p>
<blockquote>
<p>>&gt;&gt; result = [<br>…     “OOX”,<br>…     “XXO”,<br>…     “OXX”]</p>
<p>>&gt;&gt; rows = result</p>
<p>>&gt;&gt; for i in zip(*rows):</p>
<p>…   print(i)</p>
<p>…</p>
<p>(‘O’, ‘X’, ‘O’)</p>
<p>(‘O’, ‘X’, ‘X’)</p>
<p>(‘X’, ‘O’, ‘X’)</p>
<p>>&gt;&gt;</p>
</blockquote>
<p><strong>2.获取对角线上的元素组合</strong></p>
<p><strong>3.行上的元素组合+列上的元素组合+对角线元素组合，然后判断胜利方</strong></p>
<h2 id="zip的用法："><a href="#zip的用法：" class="headerlink" title="zip的用法："></a><strong>zip的用法：</strong></h2><pre><code>&gt;help(zip)

Help on class zip in module builtins:

class zip(object)

 |  zip(iter1 [,iter2 [...]]) --&gt; zip object
 |
 |  Return a zip object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the shortest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.
 |
 |  Methods defined here:
 |
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  __next__(self, /)
 |      Implement next(self).
 |
 |  __reduce__(...)
 |      Return state information for pickling.
</code></pre><p>zip输入参数是一些迭代器，执行完成之后返回zip object（迭代器 ,tuple list）。</p>
<p><strong>zip用法中需要注意的是：</strong></p>
<p><strong>1.zip是将每个可迭代对象的对应位置元素打包成一个tuple组，例如：</strong></p>
<pre><code>二维矩阵变换（矩阵的行列互换）
比如我们有一个由列表描述的二维矩阵
a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
利用zip函数：
&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; zip(*a)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
&gt;&gt;&gt; map(list,zip(*a))
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]
</code></pre><p><strong>2.(<em>)操作符与zip函数配合可以实现与zip相反的功能,即将合并的序列拆成多个tuple，如解法中的zip(</em>rows)。如：</strong></p>
<pre><code>&gt;&gt;&gt;x=[1,2,3],y=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]
&gt;&gt;&gt;zip(*zip(x,y))
[(1,2,3),(&apos;a&apos;,&apos;b&apos;,&apos;c&apos;)]
</code></pre><p><strong>3.新的序列的长度以参数中最短的序列为准.</strong></p>
<pre><code>&gt;&gt;&gt;x=[1,2],y=[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;]
&gt;&gt;&gt;zip(x,y)
[(1,&apos;a&apos;),(2,&apos;b&apos;)]
</code></pre><p><strong>zip另有一些高级用法：**</strong>1.python列表相邻元素压缩：**</p>
<pre><code>group_adjacent = lambda a, k: zip(*([iter(a)] * k))
</code></pre><p>强烈推荐阅读：<a href="https://segmentfault.com/q/1010000000612945" target="_blank" rel="external">https://segmentfault.com/q/1010000000612945</a></p>
<p>关键摘录：<br>iter() 能把一个序列生成为一个和迭代器，迭代器的特点是可以用 for in 语句迭代，原理是迭代器对象有一个next方法，可以每次移动迭代的指针，一旦迭代完，没有下一个元素的时候，会应发一个 StopIteration 异常。</p>
<p>迭代器的特点就是，迭代了一次之后，指针就移动了，不会自动回溯。例如可以用 for in 列表 a 无数次，却只能for in 迭代器 x 一次。</p>
<p>如果不用迭代器？</p>
<pre><code>&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; x = iter(a)
&gt;&gt;&gt; t = [a, a]
&gt;&gt;&gt; zip(*t)                 # 1
[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]  
&gt;&gt;&gt; tx = [x, x]                                   
&gt;&gt;&gt; zip(*tx)                # 2
[(1, 2), (3, 4), (5, 6)]
&gt;&gt;&gt; 

#1 这里的含义表示zip 传了两个参数a，a1 a2 都是a，所以就打包了这两个序列。
#2 这里面因为 x 是迭代器对象，迭代就调用 next 方法，之后就不会有了。也就是 zip 执行打包的过程先调用第一个参数的 x 的 next 方法得 1，然后调用第二个参数的 x 的next，因为这两个x对象实际上是一样的，调用第二个 x 的 next 方法的时候，迭代的指针已经移动，实际得到的时2，以次类推，过程模拟如下表示
     x.next -&gt; 1
     x.next -&gt; 2
     zip(x.next(), x.next()) ---&gt; zip(1, 2)
     x.next -&gt; 3
     x.next -&gt; 4
     zip(x.next(), x.next()) ---&gt; zip(3, 4)
    ....
</code></pre><p>等价于下面的方式</p>
<pre><code>zip([1, 3, 5], [2, 4, 6])
</code></pre><p>所以代码：</p>
<pre><code>group_adjacent = lambda a, k: zip(*([iter(a)] * k))
</code></pre><p>表示定义一个匿名函数，参数是 a和k，并绑定变量 group_adjacent。匿名函数的主体内容是，用iter将序列迭代化，然后用zip打包这个迭代器对象。</p>
<p><strong>2.使用zip反转字典</strong></p>
<pre><code>&gt;&gt;&gt; m = {&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;d&apos;: 4}
&gt;&gt;&gt; m.items()
[(&apos;a&apos;, 1), (&apos;c&apos;, 3), (&apos;b&apos;, 2), (&apos;d&apos;, 4)]
&gt;&gt;&gt; zip(m.values(), m.keys())
[(1, &apos;a&apos;), (3, &apos;c&apos;), (2, &apos;b&apos;), (4, &apos;d&apos;)]
&gt;&gt;&gt; mi = dict(zip(m.values(), m.keys()))
&gt;&gt;&gt; mi
{1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;c&apos;, 4: &apos;d&apos;}
</code></pre><p><strong>3.使用zip和iterators生成滑动窗口 (n -grams)</strong></p>
<pre><code>&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; def n_grams(a, n):
...     z = (islice(a, i, None) for i in range(n))
...     return zip(*z)
...
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; n_grams(a, 3)
[(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]
&gt;&gt;&gt; n_grams(a, 2)
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
&gt;&gt;&gt; n_grams(a, 4)
[(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]
#
islice的用法：
islice()    seq, [start,] stop [, step] elements from seq[start:stop:step]  islice(&apos;ABCDEFG&apos;, 2, None) --&gt; C D E F G
测试islice：
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; for x in islice(a,0,None):
...   print(x)
...
1
2
3
4
5
6
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; for x in islice(a,1,None):
...   print(x)
...
2
3
4
5
6
&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; for x in islice(a,2,None):
...   print(x)
...
3
4
5
6
&gt;&gt;&gt;
</code></pre><p><strong>注：</strong>例题解法来自 <a href="https://checkio.org/" target="_blank" rel="external">https://checkio.org/</a></p>
<p>我在 <a href="https://checkio.org/user/penn201500/" target="_blank" rel="external">https://checkio.org/user/penn201500/</a> ：）</p>
<hr>
<p><strong>参考：</strong></p>
<p><a href="http://wklken.me/posts/2013/08/20/python-extra-itertools.html" target="_blank" rel="external">PYTHON-进阶-ITERTOOLS模块小结</a></p>
<p><a href="http://www.cnblogs.com/BeginMan/archive/2013/03/14/2959447.html" target="_blank" rel="external">Python零碎知识(2):强大的zip</a></p>
<p><a href="https://segmentfault.com/q/1010000000612945" target="_blank" rel="external">python列表相邻元素压缩器</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      python奇思妙解
    
    </summary>
    
      <category term="python" scheme="http://learnbetter.club/categories/python/"/>
    
    
      <category term="python3" scheme="http://learnbetter.club/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hugo搭建个人博客（五）：添加站内搜索（gcse）</title>
    <link href="http://learnbetter.club/2016/06/17/hugo%205%20add%20gcse/"/>
    <id>http://learnbetter.club/2016/06/17/hugo 5 add gcse/</id>
    <published>2016-06-17T13:04:40.000Z</published>
    <updated>2016-08-07T04:31:35.013Z</updated>
    
    <content type="html"><![CDATA[<p>站内搜索推荐使用google custom search engine(gsce)。<br>gcse的使用方法强烈推荐阅读：<a href="http://lulee007.coding.me/2016/01/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE%E4%B9%8B-%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">Hexo博客优化配置之–为自己博客添加站内搜索</a></p>
<h2 id="关键部分："><a href="#关键部分：" class="headerlink" title="关键部分："></a><strong>关键部分：</strong></h2><p><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console.jpg" alt=""><br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console%202.jpg" alt=""><br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20google%20search%20console%203.jpg" alt=""></p>
<p></p><p><br>下面介绍如何在crisp的侧边栏中添加search box。</p>
<h2 id="获取search-thml"><a href="#获取search-thml" class="headerlink" title="获取search.thml"></a><strong>获取search.thml</strong></h2><p>在以下github 仓库中获取search.html文件，存放到本地header.html所在的目录。<br><a href="https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/search.html" target="_blank" rel="external">https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/search.html</a></p>
<h2 id="修改hearder-html："><a href="#修改hearder-html：" class="headerlink" title="修改hearder.html："></a><strong>修改hearder.html：</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;header id:&quot;header&quot;&gt;</div><div class="line">   &lt;!--</div><div class="line">    &lt;a id:&quot;logo&quot; href:&quot;&#123;&#123; .Site.BaseURL &#125;&#125;&quot;&gt;&lt;img src:&quot;https://www.gravatar.com/avatar/1a2807faf3cca1667ff6f04bf5886eff.png&quot; alt:&quot;&#123;&#123; .Site.Title &#125;&#125;&quot; /&gt;&lt;/a&gt;</div><div class="line">    --&gt;</div><div class="line">    &lt;h1&gt;&lt;a href:&quot;&#123;&#123;.Site.BaseURL&#125;&#125;&quot;&gt;&#123;&#123;.Site.Title&#125;&#125;&lt;/a&gt;&lt;/h1&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;.Description&#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">    &#123;&#123; partial &quot;follow.html&quot; . &#125;&#125;</div><div class="line">    &#123;&#123; partial &quot;navigation.html&quot; . &#125;&#125;</div><div class="line">    &#123;&#123; partial &quot;tags.html&quot; . &#125;&#125;</div><div class="line">    &#123;&#123; partial &quot;search.html&quot; . &#125;&#125;     &lt;!--这里添加search box--&gt;       </div><div class="line">&lt;/header&gt;</div></pre></td></tr></table></figure>
<h2 id="3-在crisp主题下新建search文件夹"><a href="#3-在crisp主题下新建search文件夹" class="headerlink" title="3. 在crisp主题下新建search文件夹"></a>3. 在crisp主题下新建search文件夹</h2><p>从<a href="https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/search/index.html" target="_blank" rel="external">https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/search/index.html</a> 获取index.html放到search文件夹中。<br>将从google search engine中得到的搜索结果代码粘贴到index.html中的script部分：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">    &lt;h1 class:&quot;post-title&quot;&gt;Search Results&lt;/h1&gt;</div><div class="line">    &lt;script&gt;</div><div class="line">  (function() &#123;</div><div class="line">    var cx : &apos;009059558632698478175:4wpqidijmx4&apos;;</div><div class="line">    var gcse : document.createElement(&apos;script&apos;);</div><div class="line">    gcse.type : &apos;text/javascript&apos;;</div><div class="line">    gcse.async : true;</div><div class="line">    gcse.src : &apos;https://cse.google.com/cse.js?cx:&apos; + cx;</div><div class="line">    var s : document.getElementsByTagName(&apos;script&apos;)[0];</div><div class="line">    s.parentNode.insertBefore(gcse, s);</div><div class="line">  &#125;)();</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;gcse:searchresults-only&gt;&lt;/gcse:searchresults-only&gt;</div></pre></td></tr></table></figure>
<p>此时在侧边栏能看到search box但是不能搜索到结果:<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20blog%20add%20gcse.jpg" alt=""></p>
<h2 id="4-生成public并发布到服务器"><a href="#4-生成public并发布到服务器" class="headerlink" title="4. 生成public并发布到服务器"></a>4. 生成public并发布到服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hugo -t crisp</div></pre></td></tr></table></figure>
<p>在mysite目录执行以上命令，生成public目录。将public目录发布到服务器即可。<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20published%20and%20can%20search%20in%20site.jpg" alt=""></p>
<p>如果是发布到github-pages，可以参考：<br><a href="http://www.liuhaihua.cn/archives/133615.html" target="_blank" rel="external">http://www.liuhaihua.cn/archives/133615.html</a><br><a href="https://www.zhihu.com/question/20962496" target="_blank" rel="external">https://www.zhihu.com/question/20962496</a></p>
<hr>
<p><strong>参考：</strong></p>
<p><a href="http://lulee007.coding.me/2016/01/23/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE%E4%B9%8B-%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/" target="_blank" rel="external">Hexo博客优化配置之–为自己博客添加站内搜索</a></p>
<p><a href="http://prozhuchen.github.io/2015/10/03/Hexo%E5%8D%9A%E5%AE%A2%E7%AC%AC%E5%9B%9B%E7%AB%99/" target="_blank" rel="external">Hexo博客第四站：搜索引擎+小插件+配置结构分析</a></p>
<p><a href="https://kb.iu.edu/d/bckj" target="_blank" rel="external">How do I use Google Custom Search on my website?</a></p>
]]></content>
    
    <summary type="html">
    
      如何使用hugo搭建个人博客
    
    </summary>
    
      <category term="Hugo" scheme="http://learnbetter.club/categories/Hugo/"/>
    
    
      <category term="Hugo" scheme="http://learnbetter.club/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hugo搭建个人博客（四）:添加评论系统disqus</title>
    <link href="http://learnbetter.club/2016/06/16/hugo%204%20add%20disqus/"/>
    <id>http://learnbetter.club/2016/06/16/hugo 4 add disqus/</id>
    <published>2016-06-16T07:04:40.000Z</published>
    <updated>2016-08-07T04:31:41.965Z</updated>
    
    <content type="html"><![CDATA[<p>按照官方说法，只需要在config.toml文件中加上disqus的shortname即可让博客拥有disqus评论系统的功能。但折腾许久未能成功，现提供另一种添加disqus的方式。</p>
<p><strong>1.注册disqus</strong><br>官网注册帐号 <a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a><br>使用方式可以参考 <a href="http://alfred-sun.github.io/blog/2014/12/05/github-pages/" target="_blank" rel="external">http://alfred-sun.github.io/blog/2014/12/05/github-pages/</a></p>
<p></p><p><br><strong>2.使用disqus</strong><br>这里使用universal code的方式，将生成的code放到新文件comments.html中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;div id:&quot;disqus_thread&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script&gt;</div><div class="line">/**</div><div class="line">* RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.</div><div class="line">* LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables</div><div class="line">*/</div><div class="line">/*</div><div class="line">var disqus_config : function () &#123;</div><div class="line">this.page.url : PAGE_URL; // Replace PAGE_URL with your page&apos;s canonical URL variable</div><div class="line">this.page.identifier : PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page&apos;s unique identifier variable</div><div class="line">&#125;;</div><div class="line">*/</div><div class="line">(function() &#123; // DON&apos;T EDIT BELOW THIS LINE</div><div class="line">var d : document, s : d.createElement(&apos;script&apos;);</div><div class="line"></div><div class="line">s.src : &apos;//wwwlearnbetterclub.disqus.com/embed.js&apos;;</div><div class="line"></div><div class="line">s.setAttribute(&apos;data-timestamp&apos;, +new Date());</div><div class="line">(d.head || d.body).appendChild(s);</div><div class="line">&#125;)();</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;noscript&gt;Please enable JavaScript to view the &lt;a href:&quot;https://disqus.com/?ref_noscript&quot; rel:&quot;nofollow&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</div></pre></td></tr></table></figure>
<p><strong>注：</strong>s.src请修改为自己的帐号信息<br>comments.html与header.html在同一个目录。</p>
<p>显示效果：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20add%20disqus.jpg" alt="hugo add disqus"></p>
<p></p><p><br><strong>3.博文中的comments可以关闭disqus功能</strong><br>可以对某篇博文单独关闭disqus功能。如test.md</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+++</div><div class="line">Categories : [&quot;test&quot;]</div><div class="line">Description : &quot;test&quot;</div><div class="line">Tags : [&quot;test&quot;]</div><div class="line">menu : &quot;main&quot;</div><div class="line">title : &quot;test hugo&quot;</div><div class="line">comments : false      #这里的comments取值为false，disqus则不可见</div><div class="line">date : 2014-08-09T05:04:40Z</div><div class="line">+++</div><div class="line"></div><div class="line"></div><div class="line">hello hugo! I am test.md</div></pre></td></tr></table></figure>
<p>comments取值为false的显示效果为：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20post-s%20comments%20is%20false%20and%20no%20disqus.jpg" alt="hugo blog comments is false and disqus no display"></p>
<hr>
<p><strong>注：</strong>如果使用多说评论，请参考 <a href="http://tonybai.com/2015/09/23/intro-of-gohugo/" target="_blank" rel="external">http://tonybai.com/2015/09/23/intro-of-gohugo/</a></p>
]]></content>
    
    <summary type="html">
    
      如何使用hugo搭建个人博客
    
    </summary>
    
      <category term="Hugo" scheme="http://learnbetter.club/categories/Hugo/"/>
    
    
      <category term="Hugo" scheme="http://learnbetter.club/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hugo搭建个人博客（三）:添加follow与修改share的方式</title>
    <link href="http://learnbetter.club/2016/06/15/hugo%203%20update%20follow%20and%20share%20method/"/>
    <id>http://learnbetter.club/2016/06/15/hugo 3 update follow and share method/</id>
    <published>2016-06-15T04:04:40.000Z</published>
    <updated>2016-08-07T04:31:47.833Z</updated>
    
    <content type="html"><![CDATA[<p>本文继续介绍如何添加follow方式与修改share的方式。</p>
<h2 id="添加mailto的功能"><a href="#添加mailto的功能" class="headerlink" title="添加mailto的功能"></a><strong>添加mailto的功能</strong></h2><p>在侧边栏的follow方式中，只留下了github follow。现增加mail to 的follow方式，便于读者使用邮件方式与博主沟通。</p>
<p>follow方式添加mail to邮箱follow方式中也可以添加mail，图标使用fontawesome的fa fa-envelope-o。<br>fontqwesome的图标可以调整大小和颜色，具体讨论见：<br><a href="http://stackoverflow.com/questions/12272372/how-to-style-icon-color-size-and-shadow-of-font-awesome-icons" target="_blank" rel="external">http://stackoverflow.com/questions/12272372/how-to-style-icon-color-size-and-shadow-of-font-awesome-icons</a></p>
<p>修改  E:\github_projects\hugo-crisp-theme-for-blog\mysite\themes\crisp\layouts\partials\follow.html文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id:&quot;follow-icons&quot;&gt;</div><div class="line">	&lt;a href:&quot;https://github.com/penn201500&quot; rel:&quot;me&quot;&gt;&lt;i class:&quot;fa fa-github-square fa-2x&quot;&gt;&lt;/i&gt;&lt;/a&gt;</div><div class="line">    &lt;a href:&quot;mailto:penn201500@gmail.com&quot; title:&quot;Gmail&quot;&gt;&lt;i class:&quot;fa fa-envelope-o fa-2x&quot; style:&quot;color:green&quot; style:&quot;font-size: 13px;&quot;&gt;&lt;/i&gt;    &lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p><strong>提醒：</strong>请将mail地址和github地址修改为自己的帐号</p>
<p>显示效果：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20add%20mailto%20follow%20method.jpg" alt="add mail to"></p>
<p></p><p></p>
<p></p><p></p>
<h2 id="修改share方式"><a href="#修改share方式" class="headerlink" title="修改share方式"></a><strong>修改share方式</strong></h2><p>test.md内容修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">+++</div><div class="line">Categories : [&quot;test&quot;]</div><div class="line">Description : &quot;test&quot;</div><div class="line">Tags : [&quot;test&quot;]</div><div class="line">menu : &quot;main&quot;</div><div class="line">title : &quot;test hugo&quot;</div><div class="line">comments : true</div><div class="line">date : 2014-08-09T05:04:40Z</div><div class="line">+++</div><div class="line"></div><div class="line"></div><div class="line">hello hugo! I am test.md</div></pre></td></tr></table></figure>
<p>默认的crisp主题在博文后面都有share方式，如红色框线部分：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20post%20share%20method.jpg" alt="hugo post share method"></p>
<p>如果想要删除这些share方式，可以删除header.html同目录下的share.html文件（或者注释）。删除share.html之后的显示结果为：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20delete%20share.jpg" alt="hugo delete share"></p><p></p>
<p></p><p></p>
<h2 id="删除author信息"><a href="#删除author信息" class="headerlink" title="删除author信息"></a><strong>删除author信息</strong></h2><p>删除share之后，博文后面还有author信息，可以注释或删除掉header.html同目录下的author.html文件。删除author.html之后的效果为：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20delete%20author%20info%20after%20deleting%20share.jpg" alt="hugo delete author"></p>
]]></content>
    
    <summary type="html">
    
      如何使用hugo搭建个人博客
    
    </summary>
    
      <category term="Hugo" scheme="http://learnbetter.club/categories/Hugo/"/>
    
    
      <category term="Hugo" scheme="http://learnbetter.club/tags/Hugo/"/>
    
  </entry>
  
  <entry>
    <title>如何使用hugo搭建个人博客（二）：修改主题的颜色，字体，布局</title>
    <link href="http://learnbetter.club/2016/06/14/hugo%202%20update%20sidebar/"/>
    <id>http://learnbetter.club/2016/06/14/hugo 2 update sidebar/</id>
    <published>2016-06-14T02:04:40.000Z</published>
    <updated>2016-08-07T04:31:54.131Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇博文中谈到了如何在本地使用hugo预览特定主题crisp，本文介绍主题的颜色，字体，布局的修改。</p>
<h2 id="修改主题侧边栏颜色"><a href="#修改主题侧边栏颜色" class="headerlink" title="修改主题侧边栏颜色"></a><strong>修改主题侧边栏颜色</strong></h2><p>crisp主题的侧边栏默认是白色，如果想改个颜色咋办？<br>到github仓库 <a href="https://github.com/penn201500/hugo-crisp-theme-for-blog/" target="_blank" rel="external">https://github.com/penn201500/hugo-crisp-theme-for-blog/</a> 获取 hugo-crisp-theme-for-blog/mysite/themes/crisp/layouts/partials/criticalpath.html  文件，替换本地themes目录下的同名文件，如<br> E:\github_projects\my_blogs\mysite\themes\hugo-theme-crisp\layouts\partials\criticalpath.html<br> 替换之后效果：<br> <img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20bgcolor.jpg" alt="hugo update sidebar bgcolor"></p>
<h2 id="修改主题字体"><a href="#修改主题字体" class="headerlink" title="修改主题字体"></a><strong>修改主题字体</strong></h2><p>在criticalpath.html文件中，查找font-family。然后修改字体类型，大小，颜色等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">body,html</div><div class="line">&#123;</div><div class="line">	font-size: 1em;</div><div class="line">	line-height: 1.65em;</div><div class="line">    font-family:&quot;Open Sans&quot;,sans-serif;</div><div class="line">    font-weight:300;color:#444</div><div class="line">	background-color: #ecf0f1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>:::::::</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>origin/master</p>
<h2 id="修改侧边栏布局"><a href="#修改侧边栏布局" class="headerlink" title="修改侧边栏布局"></a><strong>修改侧边栏布局</strong></h2><p>侧边栏不想要头像？想添加links？只要github follow？<br>下面介绍如何实现这些需求</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p><strong>1.去掉头像</strong><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>:::::::</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>origin/master<br>编辑layouts/partial目录下的header.html文件：<br>如：E:\github_projects\my_blogs\mysite\themes\hugo-theme-crisp\layouts\partials</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;header id:&quot;header&quot;&gt;</div><div class="line">    &lt;a id:&quot;logo&quot; href:&quot;&#123;&#123; .Site.BaseURL &#125;&#125;&quot;&gt;&lt;img src:&quot;https://www.gravatar.com/avatar/1a2807faf3cca1667ff6f04bf5886eff.png&quot; alt:&quot;&#123;&#123; .Site.Title &#125;&#125;&quot; /&gt;&lt;/a&gt;</div><div class="line">    &lt;h1&gt;&lt;a href:&quot;&#123;&#123;.Site.BaseURL&#125;&#125;&quot;&gt;&#123;&#123;.Site.Title&#125;&#125;&lt;/a&gt;&lt;/h1&gt;</div><div class="line">    &lt;p&gt;&#123;&#123;.Description&#125;&#125;&lt;/p&gt;</div><div class="line"></div><div class="line">    &#123;&#123; partial &quot;follow.html&quot; . &#125;&#125;</div><div class="line">    &#123;&#123; partial &quot;navigation.html&quot; . &#125;&#125;</div><div class="line">&lt;/header&gt;</div></pre></td></tr></table></figure>
<p>id : “logo”的这一行既是图片信息，替换图片，则将 imgsrc 连接替换。 取消图片则将这行注释或者删除。注释后效果如下：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20delete%20logo.jpg" alt="delete logo"></p>
<p><strong>2. 添加links</strong><br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p>
<p>:::::::</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>origin/master<br>可以参考配置文件：<a href="https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/navigation.html" target="_blank" rel="external">https://github.com/penn201500/hugo-crisp-theme-for-blog/blob/master/mysite/themes/crisp/layouts/partials/navigation.html</a><br>将与header.html同目录的navigation.html文件修改为：</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;hr class:&quot;nav-site-separator&quot;&gt;</div><div class="line">&lt;h6&gt;Links&lt;/h6&gt;</div><div class="line">&lt;nav class:&quot;nav&quot;&gt;</div><div class="line">      &lt;ul class:&quot;nav-list&quot;&gt;</div><div class="line">        &lt;font size:&quot;3&quot;&gt;</div><div class="line">	    </div><div class="line">		   &lt;li class:&quot;nav-site&quot;&gt;&lt;a href:&quot;http://lilydjwg.is-programmer.com/&quot; target:&quot;_blank&quot;&gt;依云的博客&lt;/a&gt;&lt;/li&gt;</div><div class="line">		</div><div class="line">		   &lt;li class:&quot;nav-site&quot;&gt;&lt;a href:&quot;http://evilbinary.org/&quot; target:&quot;_blank&quot;&gt;邪恶二进制&lt;/a&gt;&lt;/li&gt;</div><div class="line">		</div><div class="line">		   &lt;li class:&quot;nav-site&quot;&gt;&lt;a href:&quot;http://www.wlman.cc/&quot; target:&quot;_blank&quot;&gt;Consec &apos;s Blog&lt;/a&gt;&lt;/li&gt;</div><div class="line">		</div><div class="line">		   &lt;li class:&quot;nav-site&quot;&gt;&lt;a href:&quot;http://www.linuxzen.com/&quot; target:&quot;_blank&quot;&gt;cold&apos;s world&lt;/a&gt;&lt;/li&gt;</div><div class="line">		&lt;/font&gt;</div><div class="line">	  &lt;/ul&gt;</div><div class="line">&lt;/nav&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>class:"nav-site"> ``` 这一行可以编辑一个链接。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">修改后效果如下：</div><div class="line">![add links](http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20add%20links.jpg)</div><div class="line"></div><div class="line"></div><div class="line">**3. 只需要github follow**</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line"></div><div class="line">:::::::</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/master</div><div class="line">crisp主题的follow方式有facebook，twitter，linkedin，github，google+, rss 。</div><div class="line">下面介绍如何只留github follow方式（添加或删除其他的follow方式类似）</div><div class="line">将同目录下的follow.html修改如下：</div></pre></td></tr></table></figure>
<p><div id:"follow-icons"=""><br>    <a href:"https:="" github.com="" penn201500"="" rel:"me"=""><i class:"fa="" fa-github-square="" fa-2x"=""></i></a><br></div><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">图标使用的是fontawesome，可以从github fork：</div><div class="line">https://github.com/penn201500/Font-Awesome.git</div><div class="line">或者访问fontawesome：</div><div class="line">http://fontawesome.io/icons/</div><div class="line"></div><div class="line">修改follow.html的效果：</div><div class="line">![update follow method](http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20update%20follow%20method.jpg)</div><div class="line"></div><div class="line"></div><div class="line">**4.增加tags和修改title**</div><div class="line">4.1 修改title</div><div class="line">将E:\github_projects\my_blogs\mysite目录下的config.toml文件修改为：</div></pre></td></tr></table></figure></p>
<p>baseurl : “<a href="http://www.learnbetter.club" target="_blank" rel="external">http://www.learnbetter.club</a>“<br>languageCode : “en-us”<br>title : “My Blog”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">4.2 add tags</div><div class="line">1.增加tags.html文件到header.html文件所在的目录。tags.html文件的内容为：</div><div class="line">![](http://o7ubfyghw.bkt.clouddn.com/tags.jpg)</div><div class="line"></div><div class="line">2.并修改header.html：</div><div class="line">![](http://o7ubfyghw.bkt.clouddn.com/header.jpg)</div><div class="line"></div><div class="line">3.修改E:\github_projects\my_blogs\mysite\content\content\test.md文件为：</div></pre></td></tr></table></figure></p>
<p>+++<br>date : “2016-05-29T23:56:41+08:00”<br>draft : true<br>title : “test”<br>tags : “test”<br>+++</p>
<p>hello hugo! I am test.md<br>```<br>显示效果为：<br><img src="http://o7ubfyghw.bkt.clouddn.com/hugo%20update%20sidebar%20update%20title%20add%20tags.jpg" alt="add tags and update title"></p>
<hr>
<p><strong>注：</strong>如果有其他好的博客主题，且托管在github上，可以clone到本地进行修改尝试</p>
]]></content>
    
    <summary type="html">
    
      如何使用hugo搭建个人博客
    
    </summary>
    
      <category term="Hugo" scheme="http://learnbetter.club/categories/Hugo/"/>
    
    
      <category term="Hugo" scheme="http://learnbetter.club/tags/Hugo/"/>
    
  </entry>
  
</feed>
